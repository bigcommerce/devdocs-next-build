{"path":"api-docs/partner/shipping-solutions/checkout","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Partner Information","to":"/api-docs/partner"},{"content":"Shipping Solutions","to":"/api-docs/partner/shipping-solutions"},{"content":"Checkout","to":"/api-docs/partner/shipping-solutions/checkout"}],"page":{"meta":{"title":"Checkout - Shipping Solutions - Partner Information - API Docs","url":"/api-docs/partner/shipping-solutions/checkout","description":"Cart and Checkout\n\n\n\nOn this page\n\nStorefront Cart and Checkout\n\nServer-to-Server Cart and Checkout\n\nWhen to use\n\nPersistent cart\n\nTroubleshooting cart ..."},"title":"Checkout","parsedPath":["pages","/api-docs","data","children",9,"data","children",8,"data","children",2],"rootPagePath":"/api-docs","path":"/api-docs/partner/shipping-solutions/checkout","isSubpage":true,"route":{"path":"/checkout"},"data":{"blocks":[{"type":"text","data":"# Cart and Checkout\n\n<div class=\"otp\" id=\"no-index\">\n\n### On this page\n- [Storefront Cart and Checkout](#storefront-cart-and-checkout)\n- [Server-to-Server Cart and Checkout](#server-to-server-cart-and-checkout)\n- [When to use](#when-to-use)\n- [Persistent cart](#persistent-cart)\n- [Troubleshooting cart errors](#troubleshooting-cart-errors)\n- [Related resources](#related-resources)\n\n</div>\n\n## Storefront Cart and Checkout\n\n\nThe Storefront APIs are for managing the contents of a shopper's cart and checkout using JavaScript in the context of a storefront session.\n\n\n### When to use the Storefront APIs\n\n\n* Analytics and Tracking\n* Retrieving cart data client-side\n* Quick Order Form\n* Upsell applications\n\n### Using the Fetch API\nThe [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) is an alternative to [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) for making http requests in JavaScript. You can use the Fetch API to interact with the Storefront APIs and return a shopper's cart, checkout, or order.\n\nMost modern browsers, except Internet Explorer, support Fetch API. We recommend using a [Polyfill](https://github.com/github/fetch) for Internet Explorer 10+ and XMLHttpRequest for earlier versions.\n\n\nTo learn more about using the Fetch API with the Storefront see our [Working with the Storefront Cart and Checkout APIs](/api-docs/cart-and-checkout/working-sf-apis) tutorial.\n\n\nYou can run fetch requests from the browser console to test, or you can  use the [Scripts API](/api-docs/scripts/scripts-overview) to inject JavaScript into your theme's footer.\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Log Cart Details to the Console</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Log Cart Details to the Console\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```html\n<script>\nconsole.log('Log Cart');\nfetch('/api/storefront/cart', {\n  credentials: 'include'\n}).then(function(response) {\n  return response.json();\n}).then(function(myJson) {\n  console.log(myJson);\n});\n</script>\n```\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Log Checkout Details to the Console</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Log Checkout Details to the Console\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```html\n<script>\nconsole.log('Log Checkout');\nfetch('/api/storefront/cart?includes=consignments.availableShippingOptions', {\n    credentials: 'include'\n}).then(function (response) {\n    return response.json();\n}).then(function (cartJson) {\n    console.log(cartJson);\n    return cartJson[0].id;\n}).catch(function (error) {\n    console.log(error);\n}).then(function (cartId) {\n    fetch('/api/storefront/checkouts/' + cartId, {\n        credentials: 'include'\n    }).then(function (response) {\n        return response.json();\n    }).then(function (checkoutJson) {\n        console.log(checkoutJson);\n    }).catch(function (error) {\n        console.log(error);\n    })\n});\n</script>\n```\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Log Order Details to the Console</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Log Order Details to the Console\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```html\n<script>\nconsole.log('Log Order');\nfetch('/api/storefront/order/{{checkout.order.id}}', {\n    credentials: 'include'\n}).then(function (response) {\n    return response.json();\n}).then(function (myJson) {\n    console.log(myJson);\n});\n</script>\n```\n\n## Server-to-Server Cart and Checkout\n\n\nThe Server-to-Server APIs are for managing the contents of a shopping cart and checkout remotely from a server. Using the Cart, Checkout, and Payment APIs allows for a fully headless ecommerce solution.\n\n\n### CaaS\n\n[Commerce-as-a-Service](https://www.bigcommerce.com/commerce-as-a-service/) is made possible with the Server-to-Server APIs. It lets the underlying Cart, Checkout, Order, and Payment APIs be called from a separate app, allowing you to create a completely custom checkout without touching the BigCommerce storefront.\n\n\n## When to use\n* Modifying cart contents, such as price matching\n* Taking a shopper through cart and checkout using an app\n* Quote Builder - Building a cart then restoring it on the storefront\n* Native mobile apps\n* Pre-filling customer information\n\n<a href=\"#cart-checkout_persistent-cart\" id=\"cart-checkout_persistent-cart\"></a>\n\n## Persistent Cart\n\n\n[Persistent Cart](https://support.bigcommerce.com/s/article/Persistent-Cart) allows for a logged-in shopper to access the same cart across devices. Persistent cart is available on [Plus, Pro, and Enterprise plans](https://www.bigcommerce.com/essentials/pricing/).\n\nPersistent Cart works with our Storefront Cart and Server-to-Server Cart.\n\nTo learn more on setup, see [Persistent Cart](https://support.bigcommerce.com/s/article/Persistent-Cart).\n\n## Troubleshooting cart errors\nWe will go over common Storefront Cart and Checkout as well as Server-to-Server Cart and Checkout errors. Each scenario will include the error message and how to fix the error. The most common errors are listed below.\n\n\n### Please create some text for the API option [422]\n*Server to Server Cart API*\n\n***Issue:*** When a cart contains a product that has an incorrect or missing text modifier.\n\n***Resolution:***\nOptions and modifiers refer to a list of choices on a product. Options used to build out variants and modifiers are not tied to variants at all. To learn more about options and modifiers, see [Products Overview](/api-docs/catalog/products-overview#products-overview_modifier-options).\n\nTo add a product to the cart with a single modifier (text field), POST to the [Cart API](/api-reference/cart-checkout/server-server-cart-api/cart/createacart) without the `variant_id`.\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Single Modifier</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Single Modifier\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"option_selections\": [\n        {\n          \"option_id\": 123,\n          \"option_value\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nTo add a product to the cart with one option (radio button) associated with it, use just the `variant_id` in the request.\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Single Option</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Single Option\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"variant_id\": 2331\n    }\n  ]\n}\n```\n\nTo add a product with both an option and a modifier associated with it, use the `option_id` and `option_value`. This example uses a radio button (option) and a text field (modifier).\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Modifier and Option</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Modifier and Option\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 101,\n      \"option_selections\": [\n        {\n          \"option_id\": 231,\n          \"option_value\": 456\n        },\n        {\n          \"option_id\": 123,\n          \"option_value\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n### Missing line_items in request body [422]\n\n*Server to Server Cart API*\n\n***Issue:***\nWhen a required product modifier is missing. A product can have a modifier that is not required. In those cases, you can add the product to the cart without the modifier.\n\n***Resolution:***\nUse the [Get Products](/api-reference/catalog/catalog-api/products/getproducts) or [Get Modifier](/api-reference/catalog/catalog-api/product-modifiers/getmodifiers) endpoints to return the modifier ID. The `modifier_id` = `option_id`.\n\nTo create a cart with a product modifier:\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Create cart with modifier</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Create cart with modifier\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"option_selections\": [\n        {\n          \"option_id\": 123,\n          \"option_value\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n### A shipping address for this order is incomplete [422]\n*Server to Server Cart API*\n\n***Issue:***\nThis error can return when the customer ID of a cart has changed.\n\n***Resolution:***\nYou can link the customer ID to discounts and pricing available to that customer. However, if coupons, discounts, taxes, or shipping changes, anything that affects the cart price is invalidated. \n\nA better option is to create a cart with the `customer_id` as part of the request body and use the [Get Customers](/api-reference/customer-subscribers/customers-api/customers/getallcustomers) endpoint to get the `customer_id`.\n\nTo create a cart with a `customer_id`:\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Create cart with customer ID</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Create cart with customer ID\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"customer_id\": 12,\n  \"line_items\": [\n    {\n      \"quantity\": 5,\n      \"product_id\": 191\n    }\n  ]\n}\n```\n\n### This product has options; variant ID is required [422]\n*Server-to-Server Cart API*\n\n\n***Issue:***  When a product has options and variant ID is not supplied in either the create or update cart request.\n\n***Resolution:***\nTo get the variant ID use the [Get Products](/api-reference/catalog/catalog-api/products/getproducts) endpoint or the [Get Variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid) endpoint.\nTo create a cart with a variant ID:\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Create cart with variant ID</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Create cart with variant ID\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"variant_id\": 2331\n    }\n  ]\n}\n```\n\n***Issue:***\nThe `option_id` is incorrect.\n\n***Resolution:***\nTo get the correct `option_id`, make a request to [Get Products](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/products) or [Get Options](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/product-options/getoptions).\n\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Create cart option ID</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Create cart option ID\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"line_item\": {\n    \"quantity\": 1,\n    \"product_id\": 76,\n    \"list_price\": 170.00,\n    \"option_selections\": [\n      {\n        \"option_id\": 21506,\n        \"option_value\": 10090\n      }\n    ]\n  }\n}\n```\n\n*Storefront Cart API*\n\n***Issue:***\n\n* The required modifier on the storefront is missing. This missing modifier can include a text modifier with no selection. Make sure the `optionValue` is not blank.\n\n* The variantID is incorrect.\n* The modifierID is incorrect.\n\n**Resolution:**\nTo add a product to the cart with a single modifier (text field), POST to the [Cart API](/api-reference/cart-checkout/storefront-cart-api/cart/createacart) without the `variant_id`. Use the `optionId` and `optionValue` instead.\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Create cart optionId and optionValue</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Create cart optionId and optionValue\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"lineItems\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 1001,\n      \"optionSelections\": [\n        {\n          \"optionId\": 123,\n          \"optionValue\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nTo add a product to the cart with one option (radio button) associated with it, use just the `variant_id` in the request.\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Create Storefront Cart variantID</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Create Storefront Cart variantID\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"lineItems\": [\n    {\n      \"quantity\": 1,\n      \"productId\": 1001,\n      \"variantId\": 2331\n    }\n  ]\n}\n```\n\nTo add a product that has both an option and a modifier associated with it, then use the `option_id` and `option_value`. This example uses a radio button (option) and a text field (modifier).\n\n<div class=\"HubBlock-header\">\n    <div class=\"HubBlock-header-title flex items-center\">\n        <div class=\"HubBlock-header-name\">Add item with option and modifier</div>\n    </div><div class=\"HubBlock-header-subtitle\"></div>\n</div>\n\n<!--\ntitle: \"Add item with option and modifier\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n```json\n{\n  \"lineItems\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 101,\n      \"optionSelections\": [\n        {\n          \"optionId\": 231,\n          \"optionValue\": 456\n        },\n        {\n          \"optionId\": 123,\n          \"optionValue\": \"Hello!\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n### You can only purchase a maximum of :qty of the :product per order [409]\n*Server to Server Cart API*\n\n***Issue:***\nWhen you add less than a product’s minimum required purchase or more than the maximum purchase to a cart.\n\n\n***Resolution:***\nCheck the product for `order_quantity_minimum` and `order_quantity_maximum` for the correct amount to add to the cart. Use the [Get Product](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/products/getproducts) endpoint.\n\n\n### Internal Server Error [500]\n\n*Server to Server Cart API*\n\n***Issue:***\nTrying to edit a cart that does not exist.\n\n***Resolution:***\nCarts are only valid 30 days past the `date_last_modified`. Check the [Get Carts](/api-reference/cart-checkout/storefront-cart-api/cart/getacart) endpoint for the current available session cart.\n\n\n*Storefront Cart API*\n\n***Issue:***\nWhen you add less than a product’s minimum required purchase or more than the maximum allowed purchase to a cart. Use the [Get Product](/api-reference/catalog/catalog-api/products/getproducts) endpoint to check for min/max purchase restrictions.\n\n***Resolution:***\nCheck the product for order_quantity_minimum and order_quantity_maximum for the correct amount to add the cart. Use the [Get Product](/api-reference/catalog/catalog-api/products/getproducts) endpoint.\n\n## Related resources\n\n### Articles\n* [Working with the Storefront Cart and Checkout](https://developer.bigcommerce.com/api-docs/cart-and-checkout/working-sf-apis)\n\n### Endpoints\n* [Storefront Cart](/api-reference/cart-checkout/storefront-cart-api)\n* [Storefront Checkout](/api-reference/cart-checkout/storefront-checkout-api)\n* [Server-to-Server Cart](/api-reference/cart-checkout/server-server-cart-api)\n* [Server-to-Server Checkout](/api-reference/cart-checkout/server-server-checkout-api)\n\n### Webhooks\n* [Orders](/api-docs/getting-started/webhooks/webhook-events#webhook-events_orders)\n* [SKU](/api-docs/getting-started/webhooks/webhook-events#webhook-events_sku)\n* [Cart](/api-docs/getting-started/webhooks/webhook-events#webhook-events_cart)\n"}],"children":[]}}}}
