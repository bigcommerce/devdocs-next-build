{"path":"api-docs/storefront/add-to-cart-urls","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Storefront APIs","to":"/api-docs/storefront"},{"content":"Add to Cart URLs","to":"/api-docs/storefront/add-to-cart-urls"}],"page":{"meta":{"title":"Add to Cart URLs - Storefront APIs - API Docs","url":"/api-docs/storefront/add-to-cart-urls","description":"Add to Cart URLs\n\n\n\nOn this page\n\nParameters\n\nCommon usage\n\nAdding multiple products\n\n\n\nQuery string parameters can be appended to Bigcommerce product a..."},"title":"Add to Cart URLs","parsedPath":["pages","/api-docs","data","children",1,"data","children",3],"rootPagePath":"/api-docs","path":"/api-docs/storefront/add-to-cart-urls","isSubpage":true,"route":{"path":"/add-to-cart-urls"},"data":{"blocks":[{"type":"text","data":"# Add to Cart URLs\n\n<div class=\"otp\" id=\"no-index\">\n\n### On this page\n- [Parameters](#parameters)\n- [Common usage](#common-usage)\n- [Adding multiple products](#adding-multiple-products)\n\n</div>\n\nQuery string parameters can be appended to Bigcommerce product and `/cart.php` urls in order to pre-select an SKU or add a product to cart. These parameters make it possible to build custom add to cart links and forms for use on BigCommerce storefronts and remote sites (such as WordPress, blog posts, and social media).\n\nURLs constructed with these parameters allow you to:\n* Pre-select a specific SKU on a product detail page\n* Add a specific product or SKU to the cart\n* Add a specific SKU to the cart and go directly to checkout.\n* Attach a `source` for marketing and analytics purposes\n\n## Parameters\n\n| **Type**| **Parameter** | **Description**                                     | **Example**                                                 |\n|-- |-|--|-|\n| string  | `action=`     | `add` or  `buy`; `buy` goes directly to checkout    | `/cart.php?action=add&product_id=123`                       |\n| string  | `couponcode=` | coupon code to apply to the cart                    | `/cart.php?action=add&product_id=123&couponcode=10off100`   |\n| int     | `product_id=` | product id to add to the cart                       | `/cart.php?action=add&product_id=123`                       |\n| int     | `qty=`        | quantity to add to the cart                         | `/cart.php?action=add&product_id=123&qty=3`                 |\n| string  | `sku=`        | SKU to add to the cart (or select on product page)  | `/cart.php?action=add&sku=xlredtshirt`                      |\n| string  | `source=`     | source of the sale for analytics; can be any string | `/cart.php?action=buy&sku=xlredtshirt&source=emailcampaign` |\n\n## Common usage\n\nBelow is a table of common scenarios and example URLs.\n\n| **Scenario**                                                 | **URL**                                                              |\n|--|-|\n| Select a specific SKU on Product Detail page                 |`https://{{domain}}/{{page}}?sku={{sku}}`                             |\n| Add specific SKU to cart                                     |`https://{{domain}}/cart.php?action=add&sku={{sku}}`                  |\n| Add specific SKU to cart, go directly to checkout            |`https://{{domain}}/cart.php?action=buy&sku={{sku}}`                  |\n| Add specific SKU to cart, go to checkout, and include source |`https://{{domain}}/cart.php?action=buy&sku={{sku}}&source={{src}}`   |\n| Add product to cart by product id and set quantity           |`https://{{domain}}/cart.php?action=add&product_id={{id}}&qty={{qty}}`|\n| Add product to cart and set coupon code                      |`https://{{domain}}/cart.php?action=add&product_id={{id}}&couponcode={{code}}`          |\n\nOnce constructed, a URL can be inserted directly as text or as an HTML link:\n\n```html\n<a href=\"https://example.com/cart.php?action=buy&product_id=123&source=blogpost\">Purchase Our New Product Now!</a>\n```\n\n## Adding multiple products\n\nThe `sku` and `product_id` parameters accept a single value; you can only use the first value of a comma-separated list of values. In other words, only one product can be added for each request made to an add to cart URL. However, it's possible to combine several HTTP requests into a single button click using front-end JavaScript, as long as your code waits to receive the response of your first request before it makes a second.\n\nThe following gives a very basic example using jQuery.  You can also use async/await syntax to make a series of calls from within a `for` loop.\n\n```html\n\n<button type=\"button\" id=\"addToCart\">Add Bundle to Cart</button>\n\n<script>\n// when #addToCart is clicked...\n$(\"button#addToCart\").click(function() {\n\n\t// add product id 123\n    return $.get(\"/cart.php?action=add&product_id=123\")\n\t.done(function(data, status, xhr) {\n\t\tconsole.log('first item complete with status ' + status);\n\t})\n\t.then(function() {\n\t\t// add product id 456\n\t\treturn $.get(\"/cart.php?action=add&product_id=456\");\n\t})\n\t.done(function(data, status, xhr) {\n\t\tconsole.log('second item complete with status ' + status);\n\t})\n\t// chain more async GET requests using .then & .done\n\t.fail(function(xhr, status, error) {\n\t\tconsole.log('oh noes, error with status ' + status + ' and error: ');\n\t\tconsole.error(error);\n\t\treturn xhr.done();\n\t})\n\t.always(function() {\n\t\t// go to cart\n\t\treturn window.location = \"/cart.php\";\n\t});\n\n});\n</script>\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--warning\">\n<div class=\"HubBlock-content\">\n\n<!-- theme: warning -->\n\n> Due to CORS (Cross Origin Resource Sharing), using JavaScript to make multiple carting requests only works in the BigCommerce storefont and only on the storefront with the domain the request is being made to.\n\nAlternatively, the [Storefront Cart APIs](https://developer.bigcommerce.com/api-docs/cart-and-checkout/working-sf-apis#working-sf-apis_storefront-cart) `/api/storefront/cart` endpoint accepts an array of `lineItems` -- depending on the complexities and specifics of the use case, using Storefront Cart APIs may be a better solution than adding to cart URLs.\n\n</div>\n</div>\n</div>\n\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTEyNjk3NjY0NTJdfQ==\n-->\n"}],"children":[]}}}}
