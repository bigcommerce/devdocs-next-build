{"path":"api-docs/apps/tutorials/sample-app-nextjs/step-3-integrate","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Building Apps","to":"/api-docs/apps"},{"content":"Tutorials","to":"/api-docs/apps/tutorials"},{"content":"Build a Next.js Sample App","to":"/api-docs/apps/tutorials/sample-app-nextjs"},{"content":"Step 3: Integrate the BigCommerce API and Add a Database","to":"/api-docs/apps/tutorials/sample-app-nextjs/step-3-integrate"}],"page":{"meta":{"title":"Step 3: Integrate the BigCommerce API and Add a Database - Build a Next.js Sample App - Tutorials - Building Apps - API Docs","url":"/api-docs/apps/tutorials/sample-app-nextjs/step-3-integrate","description":"Step 3: Integrate the BigCommerce API and Add a Database\n\n\n\nOn this page\n\nInstall npm packages\n\nAdd TypeScript definitions\n\nInitialize React Context\n\nUp..."},"title":"Step 3: Integrate the BigCommerce API and Add a Database","parsedPath":["pages","/api-docs","data","children",4,"data","children",2,"data","children",0,"data","children",4],"rootPagePath":"/api-docs","path":"/api-docs/apps/tutorials/sample-app-nextjs/step-3-integrate","isSubpage":true,"route":{"path":"/step-3-integrate"},"data":{"blocks":[{"type":"text","data":"# Step 3: Integrate the BigCommerce API and Add a Database\n\n<div class=\"otp\" id=\"no-index\">\n\n### On this page\n- [Install npm packages](#install-npm-packages)\n- [Add TypeScript definitions](#add-typescript-definitions)\n- [Initialize React Context](#initialize-react-context)\n- [Update environment variables](#update-environment-variables)\n- [Update the auth lib page](#update-the-auth-lib-page)\n- [Add a database](#add-a-database)\n- [Set up Firebase database](#set-up-firebase-database)\n- [Set up MySQL database](#set-up-mysql-database)\n- [Set up a db lib page](#set-up-a-db-lib-page)\n- [Upgrade the endpoints](#upgrade-the-endpoints)\n- [Add the Products endpoint](#add-the-products-endpoint)\n- [Create a custom hook](#create-a-custom-hook)\n- [Create a header component](#create-a-header-component)\n- [Update the homepage](#update-the-homepage)\n- [Update the user interface](#update-the-user-interface)\n- [Test your app](#test-your-app)\n\n</div>\n\nNow that you have embedded your app in the BigCommerce platform, you're ready to integrate the BigCommerce API.\n\nAnytime you make an API call to BigCommerce, you need to pass in the access token. Storing the access token in a database allows you to persist the session when you call `/auth`, `/load`, or `/uninstall` endpoints. \n\nThis step demonstrates how to integrate the sample app with [Cloud Firestore](https://firebase.google.com/docs/firestore/quickstart), a cloud-hosted NoSQLFirebase database, and [MySQL](https://www.mysql.com/), a relational database management system.\n\n## Install npm packages\n\nIf using Firebase, install `firebase`, `jsonwebtoken`, and `swr` npm packages.\n\n```shell\nnpm install --save firebase jsonwebtoken swr\n```\n\nIf using MySQL, install `mysql`, `jsonwebtoken`, and `swr` npm packages.\n\n```shell\nnpm install --save mysql jsonwebtoken swr\n```\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n<!-- theme: info -->\n\n> These instructions have been tested using the **firebase v8** package.  You can view a list of all the tested package versions in the [package.json file on the Step 3 branch](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/package.json) of this sample app's repo.\n\n</div>\n</div>\n</div>\n## Add TypeScript definitions\n\n1. In the root directory of your project, add a `types` folder.\n\n2. In the `types` folder, create `auth.ts`, `data.ts`, `db.ts`, and `index.ts` files.\n\n3. Open the `auth.ts` file and export `User`, `SessionProps`, and `QueryParams` TypeScript type definitions.\n\n```js\nexport interface User {\n    id: number;\n    username?: string;\n    email: string;\n}\n\nexport interface SessionProps {\n    access_token?: string;\n    scope?: string;\n    user: User;\n    context: string;\n    store_hash?: string;\n    timestamp?: number;\n}\n\nexport interface QueryParams {\n    [key: string]: string | string[];\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/types/auth.ts)\n\n4. Open the `data.ts` file and export `ContextValues` TypeScript type definition.\n\n```js\nexport interface ContextValues {\n  context: string;\n  setContext: (key: string) => void;\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/types/data.ts)\n\n5. Open the `db.ts` file. Import `SessionProps` from `./index` and export `StoreData`, `UserData`, and `Db` TypeScript type definitions.\n\n```js\nimport { SessionProps } from './index';\n\nexport interface StoreData {\n    accessToken?: string;\n    scope?: string;\n    storeHash: string;\n}\n\nexport interface UserData {\n    email: string;\n    storeHash: string;\n    username?: string;\n}\n\nexport interface Db {\n    setUser(session: SessionProps): Promise<void>;\n    setStore(session: SessionProps): Promise<void>;\n    getStoreToken(storeHash: string): string | null;\n    deleteStore(session: SessionProps): Promise<void>;\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/types/db.ts)\n\n6. Open the `index.ts` file and export all interfaces.\n\n```js\nexport * from './auth';\nexport * from './data';\nexport * from './db';\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/types/index.ts)\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> If ngrok stops working or your ngrok session expires, restart the tunnel to get the new `ngrok_id` and update the callback URLs in the Developer Portal and the `AUTH_CALLBACK` in the `.env` file.\n\n</div>\n</div>\n</div>\n\n## Initialize React Context\n\nReact's Context API is a state management tool that streamlines the process of passing data to multiple components at different nesting levels. It lets you pass data through the component tree without having to pass props through multiple levels of React components. To learn more about Context, see React's [Context guide](https://reactjs.org/docs/context.html).\n\n1. In the root of your app, create a `context` folder.\n\n2. In the `context` folder, create a `session.tsx` file.\n\n3. Add the logic to create a context.\n\n```js\nimport { createContext, useContext, useState } from 'react';\nimport { ContextValues } from '../types';\n\nconst SessionContext = createContext<Partial<ContextValues>>({});\n\nconst SessionProvider = ({ children }) => {\n    const [context, setContext] = useState('');\n    const value = { context, setContext };\n\n    return (\n        <SessionContext.Provider value={value}>\n            {children}\n        </SessionContext.Provider>\n    );\n};\n\nexport const useSession = () => useContext(SessionContext);\n\nexport default SessionProvider;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/context/session.tsx)\n\n## Update environment variables\n\nYou use a JSON Web Token (**JWT**) to securely transmit information encoded as a JSON object between parties. To learn more about JWT, see the [Internet Engineering Task Force documentation](https://datatracker.ietf.org/doc/html/rfc7519).\n\n1. Open the `.env` file.\n\n2. Enter a JWT secret. Your JWT key should be at least 32 random characters (256 bits) for HS256.\n\n```shell\nJWT_KEY={SECRET}\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> The JWT key should be at least 32 random characters (256 bits) for HS256.\n\n</div>\n</div>\n</div>\n\n## Update the auth lib page\n\n1. In the `lib` folder, open the `auth.ts` file.\n\n2. At the top of the file, add the following imports:\n\n```js\nimport * as jwt from 'jsonwebtoken';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { QueryParams, SessionProps } from '../types';\nimport db from './db';\n```\n\n3. Below the import statements, add the following line of code to destructure environment variables from `.env`:\n\n```js\nconst { AUTH_CALLBACK, CLIENT_ID, CLIENT_SECRET, JWT_KEY } = process.env;\n```\n\n4. Remove the `process.env` global variable from the BigCommerce instances.\n\n```js\nconst bigcommerce = new BigCommerce({\n    logLevel: 'info',\n    clientId: CLIENT_ID,\n    secret: CLIENT_SECRET,\n    callback: AUTH_CALLBACK,\n    responseType: 'json',\n    headers: { 'Accept-Encoding': '*' },\n    apiVersion: 'v3'\n});\n\nconst bigcommerceSigned = new BigCommerce({\n    secret: CLIENT_SECRET,\n    responseType: 'json'\n});\n```\n\n5. Remove the `QueryParams` interface.\n\n```js\n//Delete this code\ninterface QueryParams {\n   [key: string]: string;\n}\n```\n\n6. Below the `bigcommerceSigned` variable, export the `bigcommerceClient` function.\n\n```js\nexport function bigcommerceClient(accessToken: string, storeHash: string) {\n    return new BigCommerce({\n        clientId: CLIENT_ID,\n        accessToken,\n        storeHash,\n        responseType: 'json',\n        apiVersion: 'v3'\n    });\n}\n```\n\n7. Export `getBCAuth` and `getBCVerify` functions.\n\n```js\nexport function getBCAuth(query: QueryParams) {\n    return bigcommerce.authorize(query);\n}\n\nexport function getBCVerify({ signed_payload_jwt }: QueryParams) {\n    return bigcommerceSigned.verifyJWT(signed_payload_jwt);\n}\n``` \n\n8. Add the `setSession`, `getSession`, and `removeSession` functions.\n\n```js\nexport async function setSession(session: SessionProps) {\n    db.setUser(session);\n    db.setStore(session);\n}\n\nexport async function getSession({ query: { context = '' } }: NextApiRequest) {\n    if (typeof context !== 'string') return;\n    const decodedContext = decodePayload(context)?.context;\n    const accessToken = await db.getStoreToken(decodedContext);\n\n    return { accessToken, storeHash: decodedContext };\n}\n\nexport async function removeSession(res: NextApiResponse, session: SessionProps) {\n    await db.deleteStore(session);\n}\n```\n\n9. Add the `encodePayload` and `decodePayload` functions.\n\n```js\nexport function encodePayload(context: string) {\n    return jwt.sign({ context }, JWT_KEY, { expiresIn: '24h' });\n}\n\nexport function decodePayload(encodedContext: string) {\n    return jwt.verify(encodedContext, JWT_KEY);\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/lib/auth.ts)\n\n## Add a database\n\nIn this section of the tutorial, we provide config and initialization code for both Firebase and MySQL databases. Depending on the database you choose to integrate your app with, use the configuration instructions specific to your setup. \n\nFor Firebase configuration instructions, see [Set up Firebase database](#set-up-firebase-database).\n\nFor MySQL configuration instructions, see [Set up MySQL database](#set-up-mysql-database).\n\n## Set up Firebase database\n\n[Cloud Firestore](https://firebase.google.com/docs/firestore/quickstart) is a cloud-hosted NoSQL Firebase database built on Google's infrastructure. To learn more about Firebase, including how-to guides and code samples, see [Firebase Documentation](https://firebase.google.com/docs). For a quickstart on how to set up your Cloud Firestore, see [Get started](https://firebase.google.com/docs/firestore/quickstart).\n\n### Create a Firebase project\n\n1. Sign in to [Cloud Firestore](https://firebase.google.com/products/firestore) using your Google account. To create a Google account, visit the [Google signup page](https://accounts.google.com/signup/v2/webcreateaccount?hl=en&flowName=GlifWebSignIn&flowEntry=SignUp).\n\n2. Once logged in, click **Go to console** in the top right corner.\n\n3. In the Firebase console, click **Add project**.\n\n4. Enter your project name and click **Continue**.\n\n5. Click **Create project**.\n\n### Create a Firebase config\n\n1. In your Firebase project console, click on the **settings icon** that resembles a gear in the top left corner.\n\n2. Select **Project settings** from the dropdown menu.\n\n3. Under the **General** tab, scroll down to **Your apps** and click on the **code icon** (</>) to select the web platform.\n\n4. Type in the name of your app and click **Register app**.\n\n5. Make a note of the Firebase `apiKey`, `authDomain`, and `projectId`. You will need that information to update the app's environment variables.\n\n### Create a Cloud Firestore database\n\n1. In your Firebase console, click **Firestore Database** under **Build** in the left pane. Follow the steps to create a Cloud Firestore database.\n\n2. Click **Create database**.\n\n3. Choose **Start in test mode**.\n\n4. Select your Cloud Firestore location and click **Enable**.\n\n### Update environment variables\n\n1. In the `.env` file, specify the database type.\n\n```shell\nDB_TYPE=firebase\n```\n\n2. Enter your Firebase database config keys.\n\n```shell\nFIRE_API_KEY={firebaseConfig.apiKey}\nFIRE_DOMAIN={firebaseConfig.authDomain}\nFIRE_PROJECT_ID={firebaseConfig.projectId}\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> In the development mode, every time you modify your environment variables, make sure to restart the process (`npm run dev`) to capture the changes.\n\n</div>\n</div>\n</div>\n\n### Configure the Firebase database\n\n1. In the `lib` folder, create a `dbs` folder. \n\n2. In the `dbs` folder, create a `firebase.ts` file.\n\n3. At the top of the file, import the Firebase packages and TypeScript definitions.\n\n```js\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { SessionProps, UserData } from '../../types';\n```\n\n4. Add the Firebase config and initialization logic.\n\n```js\n// Firebase config and initialization\n// Prod applications might use config file\n\n// Destructure the Firebase API key, domain, and project ID from the environment variables\nconst { FIRE_API_KEY, FIRE_DOMAIN, FIRE_PROJECT_ID } = process.env;\n\n// Set up the Firebase config\nconst firebaseConfig = {\n    apiKey: FIRE_API_KEY,\n    authDomain: FIRE_DOMAIN,\n    projectId: FIRE_PROJECT_ID,\n};\n\n// Set up conditions to determine app's initialization\nif (!firebase.apps.length) {\n    // Initialize Firebase\n    firebase.initializeApp(firebaseConfig);\n} else {\n    firebase.app();\n}\n\n// Set up the database\nconst db = firebase.firestore();\n\n// Add Firestore database management functions\n\n// setUser will capture information about the user\nexport async function setUser({ context, user }: SessionProps) {\n    if (!user) return null;\n\n    const { email, id, username } = user;\n    const storeHash = context?.split('/')[1] || '';\n    const ref = db.collection('users').doc(String(id));\n    const data: UserData = { email, storeHash };\n\n    if (username) {\n        data.username = username;\n    }\n\n    await ref.set(data, { merge: true });\n}\n\n// setStore will capture the store's access token, context, and scope.\nexport async function setStore(session: SessionProps) {\n    const { access_token: accessToken, context, scope } = session;\n    // Only set on app install or update\n    if (!accessToken || !scope) return null;\n\n    const storeHash = context?.split('/')[1] || '';\n    const ref = db.collection('store').doc(storeHash);\n    const data = { accessToken, scope };\n\n    await ref.set(data);\n}\n\n// Add a function to retrieve the store hash from the database\nexport async function getStoreToken(storeHash: string) {\n    if (!storeHash) return null;\n    const storeDoc = await db.collection('store').doc(storeHash).get();\n\n    return storeDoc.exists ? storeDoc.data()?.accessToken : null;\n}\n\n// Delete the store when the user uninstalls the app\nexport async function deleteStore({ store_hash: storeHash }: SessionProps) {\n    const ref = db.collection('store').doc(storeHash);\n\n    await ref.delete();\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/lib/dbs/firebase.ts)\n\nRunning `firebase.initializeApp()` will initialize the app. For initialized apps, call `firebase.app()` to retrieve the Firebase app instance.\n\n## Set up MySQL database\n\n[MySQL](https://www.mysql.com/) is a relational database management system. For instructions on how to set up and use MySQL, see [Getting Started with MySQL](https://dev.mysql.com/doc/mysql-getting-started/en/). Once you complete the database setup, make a note of the MySQL `host`, `domain`, `username`, `password`, and `port` variables. You will need them to update the app's environment variables in the next step.\n\n### Update environment variables\n\n1. In the `.env` file, specify the database type.\n\n```shell\nDB_TYPE=mysql\n```\n\n2. Enter your MySQL database config keys.\n\n```shell\nMYSQL_HOST={mysql host}\nMYSQL_DATABASE={mysql domain}\nMYSQL_USERNAME={mysql username}\nMYSQL_PASSWORD={mysql password}\nMYSQL_PORT={mysql port}\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> In the development mode, every time you modify your environment variables, make sure to restart the process (`npm run dev`) to capture the changes.\n\n</div>\n</div>\n</div>\n\n### Configure MySQL\n\n1. In the `dbs` folder, create a `mysql.ts` file.\n\n2. At the top of the file, add the following imports:\n\n```js\nimport * as mysql from 'mysql';\nimport { promisify } from 'util';\nimport { SessionProps, StoreData } from '../../types';\n```\n\n3. Add the MySQL config and initialization logic.\n\n```js\nconst connection = mysql.createConnection(process.env.CLEARDB_DATABASE_URL);\nconst query = promisify(connection.query.bind(connection));\n\nexport async function setUser({ context, user }: SessionProps) {\n    if (!user) return null;\n\n    const { email, id, username } = user;\n    const storeHash = context?.split('/')[1] || '';\n\n    const userData = { email, userId: id, storeHash, username };\n\n    await query('REPLACE INTO users SET ?', userData);\n}\n\nexport async function setStore(session: SessionProps) {\n    const { access_token: accessToken, context, scope } = session;\n    // Only set on app install or update\n    if (!accessToken || !scope) return null;\n\n    const storeHash = context?.split('/')[1] || '';\n\n    const storeData: StoreData = { accessToken, scope, storeHash };\n    await query('REPLACE INTO stores SET ?', storeData);\n}\n\nexport async function getStore() {\n    const results = await query('SELECT * from stores limit 1');\n\n    return results.length ? results[0] : null;\n}\n\nexport async function getStoreToken(storeHash: string) {\n    if (!storeHash) return null;\n\n    const results = await query('SELECT accessToken from stores limit 1');\n\n    return results.length ? results[0].accessToken : null;\n}\n\nexport async function deleteStore({ store_hash: storeHash }: SessionProps) {\n    await query('DELETE FROM stores WHERE storeHash = ?', storeHash);\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/lib/dbs/mysql.ts)\n\n\n\n## Set up a db lib page\n\n2. In the `lib` folder, create a `db.ts` file.\n\n3. Open the `db.ts` file and add the `Db` import at the top of the file.\n\n```js\nimport { Db } from '../types'\n```\n\n4. Add the switch expression to determine which database code to execute.\n\n```js\nconst { DB_TYPE } = process.env;\n\nlet db: Db;\n\nswitch (DB_TYPE) {\n    case 'firebase':\n        db = require('./dbs/firebase');\n        break;\n    case 'mysql':\n        db = require('./dbs/mysql');\n        break;\n    default:\n        db = require('./dbs/firebase');\n        break;\n}\n\nexport default db;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/lib/db.ts)\n\n## Upgrade the endpoints\n\n**auth**\n\n1. Open the `auth.ts` file nested inside the `pages/api` folder.\n\n2. Import `encodePayload` and `setSession` from `/lib/auth`. Your imports should now look like this:\n\n```js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { encodePayload, getBCAuth, setSession } from '../../lib/auth';\n```\n\n3. Update the logic to authenticate the app on install.\n\n```js\nexport default async function auth(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        // Authenticate the app on install\n        const session = await getBCAuth(req.query);\n        const storeHash = session?.context?.split('/')[1] || '';\n        const encodedContext = encodePayload(storeHash); // Signed JWT to validate/ prevent tampering\n\n        await setSession(session);\n        res.redirect(302, `/?context=${encodedContext}`);\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json(message);\n    }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/pages/api/auth.ts)\n\n**load**\n\n1. Open the `load.ts` file nested inside the `pages/api` folder.\n\n2. Import `encodePayload` and `setSession` from `/lib/auth`. Your imports should now look like this:\n\n```js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { encodePayload, getBCVerify, setSession } from '../../lib/auth';\n```\n\n3. Update the logic to authenticate the app on load.\n\n```js\nexport default async function load(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        // Verify when app loaded (launch)\n        const session = await getBCVerify(req.query);\n        const storeHash = session?.context?.split('/')[1] || '';\n        const encodedContext = encodePayload(storeHash); // Signed JWT to validate/ prevent tampering\n\n        await setSession(session);\n        res.redirect(302, `/?context=${encodedContext}`);\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json(message);\n    }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/pages/api/load.ts)\n\n**uninstall** \n\n1. Open the `uninstall.ts` file nested inside the `pages/api` folder.\n\n2. Import `getBCVerify` and `removeSession` from `/lib/auth`. Your imports should now look like this:\n\n```js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { getBCVerify, removeSession } from '../../lib/auth';\n```\n\n3. Update the logic to delete the session on uninstall.\n\n```js\nexport default async function uninstall(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        const session = await getBCVerify(req.query);\n\n        await removeSession(res, session);\n        res.status(200).end();\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json(message);\n    }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/pages/api/uninstall.tss)\n\n## Add the Products endpoint\n\nThe Products endpoint retrieves your products summary from the [Catalog API](https://developer.bigcommerce.com/api-reference/store-management/catalog/summary/getcatalogsummary).\n\n1. In the `pages/api` folder, create a new folder called `products`.\n\n2. In the `products` folder, create an `index.ts` file. This will create a `/products` route.\n\n3. At the top of the file, import the following packages:\n\n```js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../lib/auth';\n```\n\n4. Add the async `products` function, which awaits the data returned from `bigcommerce.get`.\n\n```js\nexport default async function products(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        // First, retrieve the session by calling:\n        const { accessToken, storeHash } = await getSession(req);\n        // Then, connect the Node API client (to make API calls to BigCommerce)\n        const bigcommerce = bigcommerceClient(accessToken, storeHash);\n        // For this example, we'll be connecting to the Catalog API\n        const { data } = await bigcommerce.get('/catalog/summary');\n        res.status(200).json(data);\n        // Finally, handle errors\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/pages/api/products/index.ts)\n\nThe `products` function calls the `getSession` function to retrieve the session's access token and store hash. \n\n## Create a custom hook\n\nTo consume the Products endpoint, create a custom React hook using [SWR](https://swr.vercel.app/). \n\n1.  In the `lib` folder, create a `hooks.ts` file.\n\n2. At the top of the file, import the `useSWR` React hook from SWR and `useSession` from Context.\n\n```js\nimport useSWR from 'swr';\nimport { useSession } from '../context/session';\n```\n\n3. Declare the `fetcher` function.\n\n```js\nfunction fetcher(url: string, encodedContext: string) {\n    return fetch(`${url}?context=${encodedContext}`).then(res => res.json());\n}\n```\n\nThe `fetcher` function accepts the API URL and returns data asynchronously.\n\n4. Export the `useProducts` function.\n\n```js\n// Reusable SWR hooks\n// https://swr.vercel.app/\nexport function useProducts() {\n    const encodedContext = useSession()?.context;\n    // Request is deduped and cached; Can be shared across components\n    const { data, error } = useSWR(encodedContext ? ['/api/products', encodedContext] : null, fetcher);\n\n    return {\n        summary: data,\n        isError: error,\n    };\n}\n```\n\n`useSWR` accepts two arguments: the API URL and the `fetcher` function. The `fetcher` function takes the `/api/products` URL passed in from the `useProduct` function. The `useProducts` function destructures the data returned by the `useSWR` hook. \n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/lib/hooks.ts)\n\n## Create a header component\n\n1. In the app's root directory, create a `components` folder.\n\n2. In the `component`s folder, create a `header.tsx` file.\n\n3. Import `Box` and `Link` components from BigDesign.\n\n```js\nimport { Box, Link } from '@bigcommerce/big-design';\n```\n\n4. Define the `Header` functional component.\n\n```js\nconst Header = () => (\n    <Box marginBottom=\"xxLarge\">\n        <Link href=\"#\">Home</Link>\n    </Box>\n);\n\nexport default Header;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/components/header.tsx)\n\n## Update the homepage\n\n1. In the `pages` folder, open the `index.tsx` file.\n\n2. At the top of the file, replace the existing import with the following:\n\n```js\nimport { Box, Flex, Panel, Text } from '@bigcommerce/big-design';\nimport { useEffect } from 'react';\nimport Header from '../components/header';\nimport { useSession } from '../context/session';\nimport { useProducts } from '../lib/hooks';\n```\n\n3. Update the `Index` functional component.\n\n```js\nconst Index = ({ context }: { context: string }) => {\n    // Destructure summary from useProducts\n    const { summary } = useProducts();\n    // Destructure setContext from useSession\n    const { setContext } = useSession();\n\n    useEffect(() => {\n        if (context) setContext(context);\n    }, [context, setContext]);\n\n    return (\n        <Panel header=\"Homepage\">\n            {summary &&\n                <Flex>\n                    <Box marginRight=\"xLarge\">\n                        <Text>Inventory Count</Text>\n                        <Text>{summary.inventory_count}</Text>\n                    </Box>\n                    <Box marginRight=\"xLarge\">\n                        <Text>Variant Count</Text>\n                        <Text>{summary.variant_count}</Text>\n                    </Box>\n                    <Box>\n                        <Text>Primary Category</Text>\n                        <Text>{summary.primary_category_name}</Text>\n                    </Box>\n                </Flex>\n            }\n        </Panel>\n    );\n};\n\nexport const getServerSideProps = async ({ query }) => ({\n    props: { context: query?.context ?? '' }\n});\n\nexport default Index;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/pages/index.tsx)\n\n`summary` creates the `Flex` component with three `Box` components inside of it. `inventory_count`, `variant_count`, and `primary_category_name` are populated with data returned from calling the `/catalog/summary` endpoint added in [Add the Products endpoint](#add-the-products-endpoint). \n\nFor the complete list of properties returned by the `/catalog/summary` endpoint, see [Get a Catalog Summary](https://developer.bigcommerce.com/api-reference/store-management/catalog/summary/getcatalogsummary). \n\n## Update the user interface\n\n1. In the root of the pages folder, open the `_app.tsx` file.\n\n2. Import the `Box` and `Header` components.\n\n```js\nimport { Box, GlobalStyles } from '@bigcommerce/big-design';\nimport Header from '../components/header';\n```\n\n3. Import `SessionProvider` from Context.\n\n```js\nimport SessionProvider from '../context/session';\n```\n\nYour updated import statements should resemble the following:\n\n```js\nimport { Box, GlobalStyles } from '@bigcommerce/big-design';\nimport type { AppProps } from 'next/app';\nimport Header from '../components/header';\nimport SessionProvider from '../context/session';\n```\n\n4. For Context to properly propagate, we need to wrap `<Component {...pageProps} />` with the Context `SessionProvider`. This ensures that each page has access to the React Context.\n\n```js\n<SessionProvider>\n  <Component {...pageProps} />\n</SessionProvider>\n```\n\n5. Add a `Box` component and place the `Header` and `SessionProvider` components inside of it.\n\n```js\nconst MyApp = ({ Component, pageProps }: AppProps) => (\n    <>\n        <GlobalStyles />\n        <Box marginHorizontal=\"xxxLarge\" marginVertical=\"xxLarge\">\n            <Header />\n            <SessionProvider>\n                <Component {...pageProps} />\n            </SessionProvider>\n        </Box>\n    </>\n);\n\nexport default MyApp;\n```\n\n[View code in GitHub](hhttps://github.com/bigcommerce/sample-app-nodejs/blob/step-3-add-database/pages/_app.tsx)\n\n4. In the root of the `pages` folder, open `index.tsx`.\n\n5. Import the `Header` component.\n\n```js\nimport Header from '../components/header';\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-add-database/pages/index.tsx)\n\n## Test your app\n\nNow that you have synced up the database, your app should display information under **Inventory Count**, **Variant Count**, and **Primary Category** fields.\n\n![Sample app](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-13.png \"Sample app\")\n\n[Next: Enhance the User Experience with BigDesign](https://developer.bigcommerce.com/api-docs/apps/tutorials/sample-app-nextjs/step-4-enhance)\n"}],"children":[]}}}}
