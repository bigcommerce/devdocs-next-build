{"path":"api-docs/apps/tutorials/sample-app-nextjs/step-1-setup","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Building Apps","to":"/api-docs/apps"},{"content":"Tutorials","to":"/api-docs/apps/tutorials"},{"content":"Build a Next.js Sample App","to":"/api-docs/apps/tutorials/sample-app-nextjs"},{"content":"Step 1: Set up Your Local Environment","to":"/api-docs/apps/tutorials/sample-app-nextjs/step-1-setup"}],"page":{"meta":{"title":"Step 1: Set up Your Local Environment - Build a Next.js Sample App - Tutorials - Building Apps - API Docs","url":"/api-docs/apps/tutorials/sample-app-nextjs/step-1-setup","description":"Step 1: Set up Your Local Environment\n\n\n\nOn this page\n\nInstall Node\n\nSet up a project directory\n\nGenerate a package.json file\n\nInstall npm packages\n\nAdd..."},"title":"Step 1: Set up Your Local Environment","parsedPath":["pages","/api-docs","data","children",4,"data","children",2,"data","children",0,"data","children",2],"rootPagePath":"/api-docs","path":"/api-docs/apps/tutorials/sample-app-nextjs/step-1-setup","isSubpage":true,"route":{"path":"/step-1-setup"},"data":{"blocks":[{"type":"text","data":"# Step 1: Set up Your Local Environment\n\n<div class=\"otp\" id=\"no-index\">\n\n### On this page\n- [Install Node](#install-node)\n- [Set up a project directory](#set-up-a-project-directory)\n- [Generate a package.json file](#generate-a-packagejson-file)\n- [Install npm packages](#install-npm-packages)\n- [Add scripts](#add-scripts)\n- [Create a starter page](#create-a-starter-page)\n- [Initialize BigDesign](#initialize-bigdesign)\n- [Initialize styled-components](#initialize-styled-components)\n- [Start the development server](#start-the-development-server)\n\n</div>\n\nStart by setting up your local development environment.\n\n## Install Node\n\nFor this tutorial, you need Node.js version 10.13+. To check your version of Node.js, run the following command in your terminal:\n\n```shell\nnode -v\n```\n\nIf you do not have Node.js installed, you can download it from [Node.js Downloads](https://nodejs.org/en/download/). \n\n## Set up a project directory\n\n1. Create a new project directory.\n\n2. Navigate to the directory using the terminal.\n\n## Generate a package.json file\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> * Make sure that you are using Node.js version 10.13+.\n> * This sample app uses custom dependencies and does not rely on the `create-next-app` CLI tool.\n\n</div>\n</div>\n</div> \n\n1. Using the terminal, initialize the project's `package.json` file.\n\n```shell\nnpm init\n```\n\nPress enter to continue prompts.\n\nTo write a `package.json` file with default values (descriptive fields will be blank), run `npm init -y` instead.\n\n## Install npm packages\n\n1. Install BigDesign, Next, React, ReactDOM, and styled-components.\n\n```shell\nnpm install --save @bigcommerce/big-design next react react-dom styled-components\n```\n\n2. Install dev dependencies.\n\n```shell\nnpm install --save-dev babel-plugin-styled-components @types/node @types/react typescript\n```\n\n[babel-plugin-styled-components](https://www.npmjs.com/package/babel-plugin-styled-components) is a supplement to the styled-components library that, among other things, offers improved debugging and minification of styles.\n\n[@types/node](https://www.npmjs.com/package/@types/node) and [@types/react](https://www.npmjs.com/package/@types/react) contain TypeScript type definitions for Node.js and React.js respectively.\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n<!-- theme: info -->\n\n> You can view a list of all the tested package versions in the [package.json file on the Step 1 branch](https://github.com/bigcommerce/sample-app-nodejs/blob/step-1-app-foundation/package.json) of this sample app's repo.\n\n</div>\n</div>\n</div>\n\n## Add scripts\n\n1. Open `package.json` in your text editor.\n\n2. Update the `scripts` property, by adding the `dev`, `build`, and `start` scripts.\n\n```json\n\"scripts\": {\n  \"dev\": \"next\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n}\n```\n\n3. Save your changes.\n\n## Create a starter page\n\n1. In the root directory of your project, create a `pages` folder.\n\n2. In the `pages` folder, create an `index.tsx` file. This is your app's homepage.\n\n3. Open `index.tsx` in your code editor.\n\n4. Add `Panel` and `Text` BigDesign imports at the top of the file.\n\n```js\nimport { Panel, Text } from '@bigcommerce/big-design';\n```\nThe **Panel** component allows you to contain content in a structured format. To learn more about the BigDesign's **Panel** component, see [Panel Design Guidelines](https://design.bigcommerce.com/components/panels).\n\n**Text** is one of the many predefined typography components in BigDesign. BigDesign offers multiple properties to customize the typographic palette. To view available typography components, see  [Typography Design Guidelines](https://design.bigcommerce.com/components/typography).\n\n5. Add the `Index` functional component below the import statements.\n\n```js\nconst Index = () => (\n    <Panel header=\"Homepage\" margin=\"xxLarge\">\n        <Text>Hello world</Text>\n    </Panel>\n);\n\nexport default Index;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-1-app-foundation/pages/index.tsx)\n\nNext.js associates each file in the pages folder with a route based on the file's name. Consequently, the `Index` React component you exported in `pages/index.tsx` will be accessible at `/index`.\n\n## Initialize BigDesign\n\nNext.js allows you to use a theme provider and import CSS files from `node_modules`. In this tutorial, you integrate [BigDesign](https://developer.bigcommerce.com/) to give your app a distinct BigCommerce look and feel.\n\n1. Next.js uses the `App` component to initialize pages. To override the default `App` component, add the `_app.tsx` file to the `pages` folder. This is where you initialize BigDesign. \n\n2. Open `_app.tsx` and import `GlobalStyles` from BigDesign and `AppProps` from Next.js.\n\n```js\nimport { GlobalStyles } from '@bigcommerce/big-design';\nimport type { AppProps } from 'next/app'\n```\n\nImporting the `GlobalStyles` component will set BigCommerce's base styles globally.\n\n3. Add the `MyApp` functional component below the import statements.\n\n```js\nconst MyApp = ({ Component, pageProps }: AppProps) => (\n   <>\n       <GlobalStyles />\n       <Component {...pageProps} />\n   </>\n);\n \nexport default MyApp;\n```\n\nThe `Component` prop represents the active page. Consequently, it will change when you navigate between routes.\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-1-app-foundation/pages/_app.tsx)\n\n## Initialize styled-components\n\nBecause BigDesign uses styled-components, we need to add additional configuration for both BigDesign and styled-components to function properly.\n\n1. Add a custom `_document.tsx` file to your pages folder. \n\n2. Import `Document` and `DocumentContext`, the built-in TypeScript types, from Next.js.\n\n```js\nimport Document, { DocumentContext } from 'next/document';\n```\n\n3. Import `ServerStyleSheet` from styled-components.\n\n```js\nimport { ServerStyleSheet } from 'styled-components';\n```\n\n4. Extend the `Document` class.\n\n```js\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx: DocumentContext) {\n    const sheet = new ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage;\n\n    try {\n      ctx.renderPage = () =>\n        originalRenderPage({\n          enhanceApp: (App) => (props) => sheet.collectStyles(<App {...props} />),\n        })\n\n      const initialProps = await Document.getInitialProps(ctx);\n\n      return {\n        ...initialProps,\n        styles: (\n          <>\n            {initialProps.styles}\n            {sheet.getStyleElement()}\n          </>\n        ),\n      };\n    } finally {\n      sheet.seal();\n    }\n  }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-1-app-foundation/pages/_document.tsx)\n\n## Start the development server\n\n1. Using the terminal, open the root directory of your app and start the development server. \n\n```shell\nnpm run dev\n```\n\n2. Open `http://localhost:3000` from your browser. You should see the text “Hello world” displayed under **Homepage**.\n\n![Hello world](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-01.png \"Hello world\")\n\n[Next: Connect Your App to BigCommerce](https://developer.bigcommerce.com/api-docs/apps/tutorials/sample-app-nextjs/step-2-connect)\n"}],"children":[]}}}}
