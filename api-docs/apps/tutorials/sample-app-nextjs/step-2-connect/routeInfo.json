{"path":"api-docs/apps/tutorials/sample-app-nextjs/step-2-connect","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Building Apps","to":"/api-docs/apps"},{"content":"Tutorials","to":"/api-docs/apps/tutorials"},{"content":"Build a Next.js Sample App","to":"/api-docs/apps/tutorials/sample-app-nextjs"},{"content":"Step 2: Connect Your App to BigCommerce","to":"/api-docs/apps/tutorials/sample-app-nextjs/step-2-connect"}],"page":{"meta":{"title":"Step 2: Connect Your App to BigCommerce - Build a Next.js Sample App - Tutorials - Building Apps - API Docs","url":"/api-docs/apps/tutorials/sample-app-nextjs/step-2-connect","description":"Step 2: Connect Your App to BigCommerce\n\n\n\nOn this page\n\nInstall node-bigcommerce\n\nSetup the auth lib page\n\nAdd API endpoints\n\nCreate an HTTPS tunnel\n\nR..."},"title":"Step 2: Connect Your App to BigCommerce","parsedPath":["pages","/api-docs","data","children",4,"data","children",2,"data","children",0,"data","children",3],"rootPagePath":"/api-docs","path":"/api-docs/apps/tutorials/sample-app-nextjs/step-2-connect","isSubpage":true,"route":{"path":"/step-2-connect"},"data":{"blocks":[{"type":"text","data":"# Step 2: Connect Your App to BigCommerce\n\n<div class=\"otp\" id=\"no-index\">\n\n### On this page\n- [Install node-bigcommerce](#install-node-bigcommerce)\n- [Setup the auth lib page](#setup-the-auth-lib-page)\n- [Add API endpoints](#add-api-endpoints)\n- [Create an HTTPS tunnel](#create-an-https-tunnel)\n- [Register the draft app](#register-the-draft-app)\n- [Add your Client ID and Client Secret Key](#add-your-client-id-and-client-secret-key)\n- [Install and launch the app](#install-and-launch-the-app)\n\n</div>\n\nIn this step, you connect your app to the BigCommerce ecosystem embedding it into **Draft Apps**.\n\n## Install node-bigcommerce\n\nTo authenticate and use your app with the BigCommerce API, install the [node-bigcommerce](https://www.npmjs.com/package/node-bigcommerce) node module.\n\n```shell\nnpm install node-bigcommerce\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n<!-- theme: info -->\n\n> You can view a list of all the tested package versions in the [package.json file on the Step 2 branch](https://github.com/bigcommerce/sample-app-nodejs/blob/step-2-connect-app-to-bc/package.json) of this sample app's repo.\n\n</div>\n</div>\n</div>\n\n## Setup the auth lib page\n\n1. In the root directory of your app, create a `lib` folder.\n\n2. In the `lib` folder, create an `auth.ts` file.\n\n3. Open the `auth.ts` file and add the `BigCommerce` import at the top of the file.\n\n```js\nimport * as BigCommerce from 'node-bigcommerce';\n```\n\n4. Create a BigCommerce instance required as part of the authorization step when first installing the application.\n\n```js\n// Create BigCommerce instance\n// https://github.com/bigcommerce/node-bigcommerce/\nconst bigcommerce = new BigCommerce({\n    logLevel: 'info',\n    clientId: process.env.CLIENT_ID,\n    secret: process.env.CLIENT_SECRET,\n    callback: process.env.AUTH_CALLBACK,\n    responseType: 'json',\n    headers: { 'Accept-Encoding': '*' },\n    apiVersion: 'v3'\n});\n\nconst bigcommerceSigned = new BigCommerce({\n    secret: process.env.CLIENT_SECRET,\n    responseType: 'json'\n});\n\ninterface QueryParams {\n    [key: string]: string;\n}\n```\n\nThe `bigcommerceSigned` function is called when loading or uninstalling the application.\n\n5. Export the `getBCAuth` function.\n\n```js\nexport function getBCAuth(query: QueryParams) {\n    return bigcommerce.authorize(query);\n}\n```\n\nYou use the `authorize` method for the `/auth` API endpoint which gets called when you install or update the app. The `authorize` method retrieves your permanent access token and returns it in the `data` object. \n\n6. Export the `getBCVerify` function.\n\n```js\nexport function getBCVerify({ signed_payload_jwt }: QueryParams) {\n    return bigcommerceSigned.verifyJWT(signed_payload_jwt);\n}\n```\n\nThe `verifyJWT` method employs the `signed_payload_jwt` query parameter to authenticate requests. You use the `verifyJWT` method for both `/load` and `/uninstall` API endpoints. To learn more about the OAuth flow, see [Single-Click App OAuth Flow](https://developer.bigcommerce.com/api-docs/apps/guide/auth).\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-2-connect-app-to-bc/lib/auth.ts)\n\n## Add API endpoints\n\nNext.js maps all APIs that are part of the Next.js application to the `/api/*` route. You can take advantage of it by creating a sub-directory within the `pages` folder called `api`. This signals Next.js to treat files within `/pages/api` as API endpoints and automatically handle their routing. To learn more about Next.js API routes, see [API Routes](https://nextjs.org/docs/api-routes/introduction).\n\n1. In the `pages` folder, create an `api` folder.\n\n2. Open the `api` folder and add the following files: `auth.ts`, `load.ts`, and `uninstall.ts`.\n\n3. Open the `auth.ts` file and add the logic to authorize the app.\n\n```js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { getBCAuth } from '../../lib/auth';\n\nexport default async function auth(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        // First, authorize the application\n        // req.query: query param passed from the Control Panel to your app\n        await getBCAuth(req.query);\n        // Once the app has been authorized, redirect to the homepage (/pages/index.tsx)\n        res.redirect(302, '/');\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-2-connect-app-to-bc/pages/api/auth.ts)\n\nThe `/auth` endpoint gets called when installing the app. Launching (loading) or uninstalling the app will not call the `/auth` endpoint.\n\n4. Open the `load.ts` file and add the logic to sign the user in when the app calls the `/load` endpoint (when launching the app).\n\n```js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { getBCVerify } from '../../lib/auth';\n\nexport default async function load(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        await getBCVerify(req.query);\n\n        res.redirect(302, '/');\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-2-connect-app-to-bc/pages/api/load.ts)\n\n5. Open the `uninstall.ts` file and add the logic to remove a user who has uninstalled the application from their BigCommerce account.\n\n```js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { getBCVerify } from '../../lib/auth';\n\nexport default async function uninstall(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        await getBCVerify(req.query);\n\n        res.status(200).end();\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json(message);\n    }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-2-connect-app-to-bc/pages/api/uninstall.ts)\n\n## Create an HTTPS tunnel\n\nTo connect your sample app to BigCommerce, you need a publicly accessible URL. To add network access while still in the development phase, you can use [ngrok](https://ngrok.com/docs), a free tool that lets you expose local servers like `localhost:3000` to the public internet over secure tunnels.\n\n1. Open a new terminal window and install [ngrok](https://www.npmjs.com/package/ngrok#usage).\n\n```shell\nnpm install ngrok -g\n```\n\n2. Expose the web server on port 3000 to the internet.\n\n```shell\nngrok http 3000\n```\n\n3. Your terminal should display a message similar to the following:\n\n![https tunnel](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-02.png \"https tunnel\")\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> Although you can use the `ngrok` npm package without creating an account, any unauthenticated tunnels you create will expire after two hours. For the best development experience, [create a free ngrok account](https://dashboard.ngrok.com/signup), [find your ngrok authtoken](https://dashboard.ngrok.com/get-started/your-authtoken), and [add the authtoken](https://ngrok.com/docs#getting-started-authtoken) to your global `ngrok` configuration.\n\n</div>\n</div>\n</div>\n\n## Register the draft app\n\nTo register an app, you need a BigCommerce store. If you do not have a BigCommerce store, visit the [BigCommerce Pricing](https://www.bigcommerce.com/essentials/pricing/) page to start a free trial.\n\n1. In your [Developer Portal](https://devtools.bigcommerce.com/my/apps) account, click  **Create an app**.\n\n![Create an app](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-03.png \"Create an app\")\n\n2. Enter app details at the prompts. Because you are building a sample app, you can name it anything you want. Production-level apps should meet the general requirements outlined in [Approval Requirements](https://developer.bigcommerce.com/api-docs/apps/guide/requirements). \n\n3. Click **Technical**. \n\n4. Under **App Features**, select **STORE OWNER** for Multiple Users and **SINGLE-CLICK** for App Type.\n\n5. To fill out Callback URLs, retrieve the public HTTPS URL of your ngrok tunnel.\n\n![HTTPS URL](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-05.png \"HTTPS URL\")\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--warning\">\n<div class=\"HubBlock-content\">\n\n> ### Warning\n> Avoid using the HTTP URL to prevent security policy errors.\n\n</div>\n</div>\n</div>\n\n* For Auth Callback URL, enter the URL of your app followed by `/api/auth`.\n* For Load Callback URL, enter the URL of your app followed by `/api/load`.\n* For Uninstall Callback URL, enter the URL of your app followed by `/api/uninstall`.\n\n![Callback url](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-06.png \"Callback url\")\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> Next.js maps all APIs that are part of the Next.js application to the `/api/*` route. To learn more about Next.js API routes, see [API Routes](https://nextjs.org/docs/api-routes/introduction).\n\n</div>\n</div>\n</div>\n\n6. Because you will be modifying the Products API resource, set the Products OAuth scope to **MODIFY**. To learn more about the available OAuth scopes, see [OAuth scopes](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).\n\n![OAuth scopes](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-07.png \"OAuth Scopes\")\n\n7. Click **Update & Close**.\n\n8. Select **Confirm Update**.\n\nYou should see your app listed under **My Apps** in your **Developer Portal** account. \n\n## Add your Client ID and Client Secret Key\n\nIt is best practice to declare environment variables in the `.env` environment file. You use the `.env` file to store your Client ID and Client Secret Key. \n\nNext.js comes pre-equipped to handle environment variables. It loads environment variables from `.env.local` into `process.env`, allowing you to use them in Next.js data fetching and API routes. To learn more, see [Next.js Environment Variables](https://nextjs.org/docs/basic-features/environment-variables).\n\n1. Create an `.env` file in the root directory of your app.\n\n2. Add the app's credentials and auth callback placeholders to the `.env` file.\n\n```shell\nCLIENT_ID={app client id}\nCLIENT_SECRET={app secret}\n\nAUTH_CALLBACK=https://{ngrok_id}.ngrok.io/api/auth\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--warning\">\n<div class=\"HubBlock-content\">\n\n> ### Warning\n> Never share sensitive data such as API keys and passwords publicly.\n\n</div>\n</div>\n</div>\n\n3. Navigate to [Developer Portal > My Apps](https://devtools.bigcommerce.com/my/apps). Locate your app and click **View Client ID** to retrieve your app's credentials.\n4. Copy the app's Client ID and Client Secret and paste them into the `.env` file.\n5. Update `AUTH_CALLBACK` in `.env` with your `ngrok_id`. Because `env` variables are loaded on build, make sure to save your changes. \n6. Switch to the terminal window where the dev server is currently running and restart the dev environment. \n\n```shell\t\nnpm run dev\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> If ngrok stops working or your ngrok session expires, restart the tunnel to get the new `ngrok_id` and update the callback URLs in the Developer Portal and the `AUTH_CALLBACK` in the `.env` file.\n\n</div>\n</div>\n</div>\n\n## Install and launch the app\n\n1. Sign in to your BigCommerce store and navigate to [**Apps** > **My Apps** > **My Draft Apps**](https://login.bigcommerce.com/deep-links/manage/marketplace/apps/my-apps/drafts). You should see your new app displayed under **My Draft Apps**.\n\n![My draft apps](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-08.png \"My draft apps\")\n\n2. Click the app's name. \n\n3. Click **Install**.\n\n4. Click **Confirm**. \n\nYou should see your app embedded in the BigCommerce platform.\n\n![Embedded app](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-09.png \"Embedded app\")\n\n[Next: Integrate the BigCommerce API and Add a Database](https://developer.bigcommerce.com/api-docs/apps/tutorials/sample-app-nextjs/step-3-integrate)\n"}],"children":[]}}}}
