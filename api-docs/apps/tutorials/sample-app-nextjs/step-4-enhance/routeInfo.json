{"path":"api-docs/apps/tutorials/sample-app-nextjs/step-4-enhance","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Building Apps","to":"/api-docs/apps"},{"content":"Tutorials","to":"/api-docs/apps/tutorials"},{"content":"Build a Next.js Sample App","to":"/api-docs/apps/tutorials/sample-app-nextjs"},{"content":"Step 4: Enhance the User Experience with BigDesign","to":"/api-docs/apps/tutorials/sample-app-nextjs/step-4-enhance"}],"page":{"meta":{"title":"Step 4: Enhance the User Experience with BigDesign - Build a Next.js Sample App - Tutorials - Building Apps - API Docs","url":"/api-docs/apps/tutorials/sample-app-nextjs/step-4-enhance","description":"Step 4: Enhance the User Experience with BigDesign\n\n\n\nOn this page\n\nCreate the Products List route\n\nUpdate custom hooks\n\nCreate the Products page\n\nAdd t..."},"title":"Step 4: Enhance the User Experience with BigDesign","parsedPath":["pages","/api-docs","data","children",4,"data","children",2,"data","children",0,"data","children",5],"rootPagePath":"/api-docs","path":"/api-docs/apps/tutorials/sample-app-nextjs/step-4-enhance","isSubpage":true,"route":{"path":"/step-4-enhance"},"data":{"blocks":[{"type":"text","data":"# Step 4: Enhance the User Experience with BigDesign\n\n<div class=\"otp\" id=\"no-index\">\n\n### On this page\n- [Create the Products List route](#create-the-products-list-route)\n- [Update custom hooks](#update-custom-hooks)\n- [Create the Products page](#create-the-products-page)\n- [Add the InnerHeader component](#add-the-innerheader-component)\n- [Update the Header component](#update-the-header-component)\n- [Create the ErrorMessage component](#create-the-errormessage-component)\n- [Create the Loading component](#create-the-loading-component)\n- [Add system checks](#add-system-checks)\n- [Update TypeScript definitions](#update-typescript-definitions)\n- [Create the Form component](#create-the-form-component)\n- [Create dynamic product routes](#create-dynamic-product-routes)\n- [Integrate dynamic routes with the internal API](#integrate-dynamic-routes-with-the-internal-api)\n- [Style the home page](#style-the-home-page)\n- [Start the app](#start-the-app)\n\n</div>\n\n[BigDesign](https://developer.bigcommerce.com/big-design/) plays a pivotal part in the BigCommerce control panel and ecosystem. App developers are encouraged to use BigDesign to develop apps that have a native BigCommerce look and feel.\n\nThis step focuses on expanding functionality and integrating advanced design elements available as part of the BigDesign library.\n\n## Create the Products List route\n\n1. From the `pages/api` folder, open the `products` folder.\n\n2. In the `products` folder, create a `list.ts` file. The `list.ts` file will be routed to `/api/list` and treated as an API endpoint, instead of a regular component.\n\n3. At the top of the file, import the following packages:\n\n```js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../lib/auth';\n```\n\n4. Add the logic to call the Products endpoint of BigCommerce's [Catalog API](https://developer.bigcommerce.com/api-reference/store-management/catalog).\n\n```js\nexport default async function list(req: NextApiRequest, res: NextApiResponse) {\n    try {\n        const { accessToken, storeHash } = await getSession(req);\n        const bigcommerce = bigcommerceClient(accessToken, storeHash);\n        // Optional: pass in API params here\n        const params = [\n            'limit=11',\n        ].join('&');\n\n        const { data } = await bigcommerce.get(`/catalog/products?${params}`);\n        res.status(200).json(data);\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/pages/api/products/list.ts)\n\n## Update custom hooks\n\n1. In the `lib` folder, open the `hooks.ts` file.\n\n2. Add the ` isLoading` property to the `useProducts` custom hook.\n\n```js\nexport function useProducts() {\n    const encodedContext = useSession()?.context;\n    // Request is deduped and cached; Can be shared across components\n    const { data, error } = useSWR(encodedContext ? ['/api/products', encodedContext] : null, fetcher);\n\n    return {\n        summary: data,\n        isLoading: !data && !error,\n        isError: error,\n    };\n}\n```\n\n3. Add the `useProductList` custom hook.\n\n```js\nexport function useProductList() {\n    const encodedContext = useSession()?.context;\n    // Use an array to send multiple arguments to fetcher\n    const { data, error, mutate: mutateList } = useSWR(encodedContext ? ['/api/products/list', encodedContext] : null, fetcher);\n\n    return {\n        list: data,\n        isLoading: !data && !error,\n        isError: error,\n        mutateList,\n    };\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/lib/hooks.ts)\n\n## Create the Products page\n\n1. In the `pages` folder, create a `products` folder.\n\n2. In the `products` folder, create an `index.tsx` file.\n\n3. At the top of the file, import the following packages:\n\n```js\nimport { Button, Dropdown, Panel, Small, StatefulTable, Link as StyledLink } from '@bigcommerce/big-design';\nimport { MoreHorizIcon } from '@bigcommerce/big-design-icons';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { ReactElement } from 'react';\nimport { useProductList } from '../../lib/hooks';\n```\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> Because BigDesign and Next.js both have a component called `Link`, you need to import BigDesign's `Link` as `StyledLink` to avoid TypeScript errors.\n\n</div>\n</div>\n</div>\n\n4. Add the `Products` functional component. The `Products` component uses the BigDesign's [StatefulTable](https://developer.bigcommerce.com/big-design/statefulTable), a wrapper of the [Table](https://developer.bigcommerce.com/big-design/table) component that supports pagination, row selection, and sorting.\n\n```js\nconst Products = () => {\n    const router = useRouter();\n    // Retrieve data from the catalog/products endpoint\n    const { isError, isLoading, list = [] } = useProductList();\n    // Properly format data for BigDesign's StatefulTable\n    const tableItems = list.map(({ id, inventory_level: stock, name, price }) => ({\n        id,\n        name,\n        price,\n        stock,\n    }));\n    // When rendering table headers, you can return a string or a React component:\n    const renderName = (id: number, name: string): ReactElement => (\n        <Link href={`/products/${id}`}>\n            <StyledLink>{name}</StyledLink>\n        </Link>\n    );\n\n    const renderPrice = (price: number): string => (\n        new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(price)\n    );\n\n    const renderStock = (stock: number): ReactElement => (stock > 0\n        ? <Small>{stock}</Small>\n        : <Small bold marginBottom=\"none\" color=\"danger\">0</Small>\n    );\n\n    const renderAction = (id: number): ReactElement => (\n        <Dropdown\n            items={[ { content: 'Edit product', onItemClick: () => router.push(`/products/${id}`), hash: 'edit' } ]}\n            toggle={<Button iconOnly={<MoreHorizIcon color=\"secondary60\" />} variant=\"subtle\" />}\n        />\n    );\n\n    return (\n        <Panel>\n            <StatefulTable\n                columns={[\n                    { header: 'Product name', hash: 'name', render: ({ id, name }) => renderName(id, name), sortKey: 'name' },\n                    { header: 'Stock', hash: 'stock', render: ({ stock }) => renderStock(stock), sortKey: 'stock' },\n                    { header: 'Price', hash: 'price', render: ({ price }) => renderPrice(price), sortKey: 'price' },\n                    { header: 'Action', hideHeader: true, hash: 'id', render: ({ id }) => renderAction(id), sortKey: 'id' },\n                ]}\n                items={tableItems}\n                itemName=\"Products\"\n                stickyHeader\n            />\n        </Panel>\n    );\n};\n\nexport default Products;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/pages/products/index.tsx)\n\n## Add the InnerHeader component\n\n1. In the `components` folder, create an `innerHeader.tsx` file.\n\n2. At the top of the file, import the following packages:\n\n```js\nimport { Box, Button, H1, HR, Text } from '@bigcommerce/big-design';\nimport { ArrowBackIcon } from '@bigcommerce/big-design-icons';\nimport { useRouter } from 'next/router';\nimport { useProductList } from '../lib/hooks';\nimport { TabIds, TabRoutes } from './header';\n```\n\n3. Define the `InnerHeader` functional component. You use it for the Product Edit page, a subpage of `products` (`/products/[pid]`), whereas the main `Header` component is used for the main pages such as `/` and `/products`.\n\n```js\nconst InnerHeader = () => {\n    const router = useRouter();\n    const { pid } = router.query;\n    const { list = [] } = useProductList();\n    const { name } = list.find(item => item.id === Number(pid)) ?? {};\n\n    const handleBackClick = () => router.push(TabRoutes[TabIds.PRODUCTS]);\n\n    return (\n        <Box marginBottom=\"xxLarge\">\n            <Button iconLeft={<ArrowBackIcon color=\"secondary50\" />} variant=\"subtle\" onClick={handleBackClick}>\n                <Text bold color=\"secondary50\">Products</Text>\n            </Button>\n            {name &&\n                <H1>{name}</H1>\n            }\n            <HR color=\"secondary30\" />\n        </Box>\n    );\n};\n\nexport default InnerHeader;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/components/innerHeader.tsx)\n\nThe `InnerHeader` component uses BigDesign's `Button` component with the `variant` property set to `subtle`. By setting the variant type to `subtle`, you remove the button's border and simultaneously add a hover effect. To learn more about the BigDesign's `Button` component, see [Buttons Design Guidelines](https://developer.bigcommerce.com/big-design/button).\n\nThe `ArrowBackIcon` component is part of the BigDesign's Icons package. You can modify the look of the icon by setting its color and size. To learn more about BigDesign's Icons, see [Icons](https://developer.bigcommerce.com/big-design/icons).\n\n## Update the Header component\n\nIn this step, you incorporate the BigDesign's `Tabs` component into your app. You use the `Tabs` component to organize and navigate between content types. To learn more, see [Tabs Design Guidelines](https://design.bigcommerce.com/components/tabs). \n\n1. In the components folder, open the `header.tsx` file and update the imports.\n\n```js\nimport { Box, Tabs } from '@bigcommerce/big-design';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport InnerHeader from './innerHeader';\n```\n\n2. Declare `TabIds`, `TabRoutes`, `InnerRoutes`, and `HeaderTypes` variables.\n\n```js\nexport const TabIds = {\n    HOME: 'home',\n    PRODUCTS: 'products',\n};\n\nexport const TabRoutes = {\n    [TabIds.HOME]: '/',\n    [TabIds.PRODUCTS]: '/products',\n};\n\nconst InnerRoutes = [\n    '/products/[pid]',\n];\n\nconst HeaderTypes = {\n    GLOBAL: 'global',\n    INNER: 'inner',\n};\n```\n\n3. Update the `Header` functional component.\n\n```js\nconst Header = () => {\n    const [activeTab, setActiveTab] = useState<string>('');\n    const [headerType, setHeaderType] = useState<string>(HeaderTypes.GLOBAL);\n    const router = useRouter();\n    const { pathname } = router;\n\n    useEffect(() => {\n        if (InnerRoutes.includes(pathname)) {\n            // Use InnerHeader if route matches inner routes\n            setHeaderType(HeaderTypes.INNER);\n        } else {\n            // Check if new route matches TabRoutes\n            const tabKey = Object.keys(TabRoutes).find(key => TabRoutes[key] === pathname);\n\n            // Set the active tab to tabKey or set no active tab if route doesn't match (404)\n            setActiveTab(tabKey ?? '');\n            setHeaderType(HeaderTypes.GLOBAL);\n        }\n\n    }, [pathname]);\n\n    useEffect(() => {\n        // Prefetch products page to reduce latency (doesn't prefetch in dev)\n        router.prefetch('/products');\n    });\n\n    const items = [\n        { id: TabIds.HOME, title: 'Home' },\n        { id: TabIds.PRODUCTS, title: 'Products' },\n    ];\n\n    const handleTabClick = (tabId: string) => {\n        setActiveTab(tabId);\n\n        return router.push(TabRoutes[tabId]);\n    };\n\n    if (headerType === HeaderTypes.INNER) return <InnerHeader />;\n\n    return (\n        <Box marginBottom=\"xxLarge\">\n            <Tabs\n                activeTab={activeTab}\n                items={items}\n                onTabClick={handleTabClick}\n            />\n        </Box>\n    );\n};\n\nexport default Header;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/components/header.tsx)\n\nThe `Header` functional component uses the `useEffect` React hook to perform side effects and enhance performance. Notably, performance enhancement is only visible in a production or production-like environment (integration or staging). `router.prefetch()` does not prefetch the products page while in the development mode.\n\n### Test your app\n\nYour app should now display two tabs: **Home** and **Products**. Click on the **Products** tab. You should see a list of products from your test store.\n\n![Products page](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-14.png \"Products page\")\n\n### Latency\n\nWhen loading the products page for the first time, the latency you notice only happens in the development mode. In production or a production-like environment, `router.prefetch()` prefetches the products page reducing the latency.\n\nTo test your app in a production or a production-like environment (integration or staging), run `npm run build` instead of `npm run dev` in your terminal. This builds and compiles your local code. Then, run `npm run start` to get the performance enhancements traditionally not available in the development mode. \n\nKeep in mind that any changes you make to your code after running `npm run build` need to go through the build process to be captured.\n\n## Create the ErrorMessage component\n\nTo surface error messages to the app's users, add an error message component. You can call this component from any `page` or `component`.\n\n1. In the `components` folder, add the `error.tsx` file.\n\n2. Copy and paste the following code to create the `ErrorMessage` component:\n\n```js\nimport { H3, Panel } from '@bigcommerce/big-design';\n\ninterface ErrorMessageProps {\n    error?: Error;\n}\n\nconst ErrorMessage = ({ error }: ErrorMessageProps) => (\n    <Panel>\n        <H3>Failed to load</H3>\n        {error && error.message}\n    </Panel>\n);\n\nexport default ErrorMessage;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/components/error.tsx)\n\n## Create the Loading component\n\nThe `Loading` component makes use of the BigDesign's indeterminant ProgressCircle indicator. The indeterminant [ProgressCircle](https://developer.bigcommerce.com/big-design/progress-circle) represents an unknown amount of time for a task to complete. To learn more about BigDesign's progress indicators, see [Progress Indicator Design Guidelines](https://design.bigcommerce.com/components/progress-indicators).\n\nIn the `components` folder, create a `loading.tsx` file.\n\n```js\nimport { Flex, H3, Panel, ProgressCircle } from '@bigcommerce/big-design';\n\nconst Loading = () => (\n    <Panel>\n        <H3>Loading...</H3>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n            <ProgressCircle size=\"large\" />\n        </Flex>\n    </Panel>\n);\n\nexport default Loading;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/components/loading.tsx)\n\n## Add system checks\n\nNow that you have created the `ErrorMessage` and `Loading` components, you can add them to the `Products` component.\n\n1. In the `/pages/products` folder, open the `index.tsx` file.\n\n2. Import the `ErrorMessage` and `Loading` components.\n\n```js\nimport ErrorMessage from '../../components/error';\nimport Loading from '../../components/loading';\n```\n\n3. Inside the `Products` functional component, above the `return` statement, add the logic to return `ErrorMessage` and `Loading` components. `isLoading` checks when the page or component is loading and `isError` checks for API errors.\n\n```js\nif (isLoading) return <Loading />;\nif (isError) return <ErrorMessage />;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/pages/products/index.tsx)\n\n## Update TypeScript definitions\n\n1. In the `types` folder, open the `data.ts` file.\n\n2. Export `FormData` and `StringKeyValue` TypeScript definitions.\n\n```js\nexport interface FormData {\n    description: string;\n    isVisible: boolean;\n    name: string;\n    price: number;\n    type: string;\n}\n\nexport interface StringKeyValue {\n    [key: string]: string;\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/types/data.ts)\n\n## Create the Form component\n\nYou use the BigDesign's `Form` component to display and edit individual product information.\n\nThe BigDesign's `Form` component comes with built-in support for accessibility, validation, and handling errors. It supports various input types, including Input, Checkbox, Radio, Select, and Textarea. To learn more, see [Form Fields Design Guidelines](https://design.bigcommerce.com/components/forms).\n\n1. In the `components` folder, add the `form.tsx` file.\n\n2. At the top of the file, import the following packages:\n\n```js\nimport { Button, Checkbox, Flex, FormGroup, Input, Panel, Select, Form as StyledForm, Textarea } from '@bigcommerce/big-design';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport { FormData, StringKeyValue } from '../types';\n```\n\n3. Add the `FormProps` TypeScript definition.\n\n```js\ninterface FormProps {\n    formData: FormData;\n    onCancel(): void;\n    onSubmit(form: FormData): void;\n}\n```\n\n4. Declare the `FormErrors` variable.\n\n```js\nconst FormErrors = {\n    name: 'Product name is required',\n    price: 'Default price is required',\n};\n```\n\n5. Declare and export the `Form` functional component.\n\n```js\nconst Form = ({ formData, onCancel, onSubmit }: FormProps) => {\n    const { description, isVisible, name, price, type } = formData;\n    const [form, setForm] = useState<FormData>({ description, isVisible, name, price, type });\n    const [errors, setErrors] = useState<StringKeyValue>({});\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { name: formName, value } = event?.target;\n        setForm(prevForm => ({ ...prevForm, [formName]: value }));\n\n        // Add error if it exists in FormErrors and the input is empty, otherwise remove from errors\n        !value && FormErrors[formName]\n            ? setErrors(prevErrors => ({ ...prevErrors, [formName]: FormErrors[formName] }))\n            : setErrors(({ [formName]: removed, ...prevErrors }) => ({ ...prevErrors }));\n    };\n\n    const handleSelectChange = (value: string) => {\n        setForm(prevForm => ({ ...prevForm, type: value }));\n    };\n\n    const handleCheckboxChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { checked, name: formName } = event?.target;\n        setForm(prevForm => ({ ...prevForm, [formName]: checked }));\n    };\n\n    const handleSubmit = (event: FormEvent<EventTarget>) => {\n        event.preventDefault();\n\n        // If there are errors, do not submit the form\n        const hasErrors = Object.keys(errors).length > 0;\n        if (hasErrors) return;\n\n        onSubmit(form);\n    };\n\n    return (\n        <StyledForm onSubmit={handleSubmit}>\n            <Panel header=\"Basic Information\">\n                <FormGroup>\n                    <Input\n                        error={errors?.name}\n                        label=\"Product name\"\n                        name=\"name\"\n                        required\n                        value={form.name}\n                        onChange={handleChange}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Select\n                        label=\"Product type\"\n                        name=\"type\"\n                        options={[\n                            { value: 'physical', content: 'Physical' },\n                            { value: 'digital', content: 'Digital' }\n                        ]}\n                        required\n                        value={form.type}\n                        onOptionChange={handleSelectChange}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Input\n                        error={errors?.price}\n                        iconLeft={'$'}\n                        label=\"Default price (excluding tax)\"\n                        name=\"price\"\n                        placeholder=\"10.00\"\n                        required\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={form.price}\n                        onChange={handleChange}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Checkbox\n                        name=\"isVisible\"\n                        checked={form.isVisible}\n                        onChange={handleCheckboxChange}\n                        label=\"Visible on storefront\"\n                    />\n                </FormGroup>\n            </Panel>\n            <Panel header=\"Description\">\n                <FormGroup>\n                    {/* Using description for demo purposes. Consider using a wysiwig instead (e.g. TinyMCE) */}\n                    <Textarea\n                        label=\"Description\"\n                        name=\"description\"\n                        placeholder=\"Product info\"\n                        value={form.description}\n                        onChange={handleChange}\n                    />\n                </FormGroup>\n            </Panel>\n            <Flex justifyContent=\"flex-end\">\n                <Button\n                    marginRight=\"medium\"\n                    type=\"button\"\n                    variant=\"subtle\"\n                    onClick={onCancel}\n                >\n                    Cancel\n                </Button>\n                <Button type=\"submit\">Save</Button>\n            </Flex>\n        </StyledForm>\n    );\n};\n\nexport default Form;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/components/form.tsx)\n\n## Create dynamic product routes\n\nNext.js allows you to create dynamic routes by adding brackets to a page; for example, `[pid]`. Any route similar to `products/123` or `products/abc` is matched by `pages/products/[pid].tsx`. To learn more about defining dynamic routes in Next.js, see [Dynamic Routes](https://nextjs.org/docs/routing/dynamic-routes).\n\n1. Navigate to the `/pages/products` folder and create a `[pid].tsx` file.\n\n2. At the top of the file, import the following packages:\n\n```js\nimport { useRouter } from 'next/router';\nimport ErrorMessage from '../../components/error';\nimport Form from '../../components/form';\nimport Loading from '../../components/loading';\nimport { useSession } from '../../context/session';\nimport { useProductList } from '../../lib/hooks';\nimport { FormData } from '../../types';\n```\n\n3. Declare and export the `ProductInfo` functional component.\n\n```js\nconst ProductInfo = () => {\n    const router = useRouter();\n    const encodedContext = useSession()?.context;\n    const { pid } = router.query;\n    const { isError, isLoading, list = [], mutateList } = useProductList();\n    const product = list.find(item => item.id === Number(pid));\n    const { description, is_visible: isVisible, name, price, type } = product ?? {};\n    const formData = { description, isVisible, name, price, type };\n\n    const handleCancel = () => router.push('/products');\n\n    const handleSubmit = async (data: FormData) => {\n        try {\n            const filteredList = list.filter(item => item.id !== Number(pid));\n            const { description, isVisible, name, price, type } = data;\n            const apiFormattedData = { description, is_visible: isVisible, name, price, type };\n\n            // Update local data immediately (reduce latency to user)\n            mutateList([...filteredList, { ...product, ...data }], false);\n\n            // Update product details\n            await fetch(`/api/products/${pid}?context=${encodedContext}`, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(apiFormattedData),\n            });\n\n            // Refetch to validate local data\n            mutateList();\n\n            router.push('/products');\n        } catch (error) {\n            console.error('Error updating the product: ', error);\n        }\n    };\n\n    if (isLoading) return <Loading />;\n    if (isError) return <ErrorMessage />;\n\n    return (\n        <Form formData={formData} onCancel={handleCancel} onSubmit={handleSubmit} />\n    );\n};\n\nexport default ProductInfo;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/pages/products/%5Bpid%5D.tsx)\n\nThe `ProductInfo` functional component uses the `Form` component defined in `/components/form`. When you click on a product from the products list, it takes you to the corresponding page containing information about that particular product.\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> Because you fetch all of the products data with the initial Catalog API call, you do not need to make additional calls to retrieve individual product data.\n\n</div>\n</div>\n</div>\n\nThe following image illustrates the `Form` input types:\n\n![Form input types](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-15.png \"Form input types\")\n\n## Integrate dynamic routes with the internal API\n\n1. Navigate to the `/pages/api/products` folder.\n\n2. In the `products` folder, create a `[pid].ts` file.\n\n3. At the top of the file, import the following packages:\n\n```js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../lib/auth';\n```\n\n4. Add the function to update individual products based on the data passed in a `PUT` request.\n\n```js\nexport default async function products(req: NextApiRequest, res: NextApiResponse) {\n    const {\n        body,\n        query: { pid },\n    } = req;\n\n    try {\n        const { accessToken, storeHash } = await getSession(req);\n        const bigcommerce = bigcommerceClient(accessToken, storeHash);\n\n        const { data } = await bigcommerce.put(`/catalog/products/${pid}`, body);\n        res.status(200).json(data);\n    } catch (error) {\n        const { message, response } = error;\n        res.status(response?.status || 500).json({ message });\n    }\n}\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/pages/api/products/%5Bpid%5D.ts)\n\n### Test your app\n\n1. Pick a product from the products list and try changing its information such as name or price. \n\n2. Save your changes. The changes should appear on the **Products** page.\n\n## Style the home page\n\n1. In the `pages` folder, open the `index.tsx` file.\n\n2. Update the imported packages.\n\n```js\nimport { Box, Flex, H1, H4, Panel } from '@bigcommerce/big-design';\nimport { useEffect } from 'react';\nimport styled from 'styled-components';\nimport ErrorMessage from '../components/error';\nimport Loading from '../components/loading';\nimport { useSession } from '../context/session';\nimport { useProducts } from '../lib/hooks';\n```\n\n3. In the [Flex](https://developer.bigcommerce.com/big-design/flex) component, extend the styles of the [Box](https://developer.bigcommerce.com/big-design/box) component by specifying the `border`, `borderRadius`, `marginRight`, and `padding` attributes. Replace the `Text` component with `H4` and `H1` components. To learn more about BigDesign's typographic palette, see [Typography](https://design.bigcommerce.com/components/typography). \n\n```js\nconst Index = ({ context }: { context: string }) => {\n    const { isError, isLoading, summary } = useProducts();\n    const { setContext } = useSession();\n\n    useEffect(() => {\n        if (context) setContext(context);\n    }, [context, setContext]);\n\n    if (isLoading) return <Loading />;\n    if (isError) return <ErrorMessage />;\n\n    return (\n        <Panel header=\"Homepage\">\n            <Flex>\n                <StyledBox border=\"box\" borderRadius=\"normal\" marginRight=\"xLarge\" padding=\"medium\">\n                    <H4>Inventory count</H4>\n                    <H1 marginBottom=\"none\">{summary.inventory_count}</H1>\n                </StyledBox>\n                <StyledBox border=\"box\" borderRadius=\"normal\" marginRight=\"xLarge\" padding=\"medium\">\n                    <H4>Variant count</H4>\n                    <H1 marginBottom=\"none\">{summary.variant_count}</H1>\n                </StyledBox>\n                <StyledBox border=\"box\" borderRadius=\"normal\" padding=\"medium\">\n                    <H4>Primary category</H4>\n                    <H1 marginBottom=\"none\">{summary.primary_category_name}</H1>\n                </StyledBox>\n            </Flex>\n        </Panel>\n    );\n};\n\nconst StyledBox = styled(Box)`\n    min-width: 10rem;\n`;\n\nexport const getServerSideProps = async ({ query }) => ({\n    props: { context: query?.context ?? '' }\n});\n\nexport default Index;\n```\n\n[View code in GitHub](https://github.com/bigcommerce/sample-app-nodejs/blob/step-4-big-design/pages/index.tsx)\n\n### Test your app\n\nYour home page should now look similar to the following:\n\n![Styled home page](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-16.png \"Styled home page\")\n\n## Start the app\n\nTo compile all of the production code for this project and start the app in the production environment, run the following commands in your terminal:\n\n```shell\nnpm run build\nnpm run start\n```\n\nYou should now have a fully functional app that pulls data from BigCommerce's Catalog API and allows you to update each product individually, all in one convenient location.\n\n**Home page view**\n\n![Styled home page](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-16.png \"Styled home page\")\n\n**Products page view**\n\n![Products page](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-14.png \"Products page\")\n\n**Individual product page view**\n\n![Individual product page](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Sample_app/nextjs-app-17.png \"Individual product page\")\n\nThis concludes our Next.js Sample App tutorial. To continue developing with BigCommerce, consider working through these supplemental materials:\n\n* [App Store Approval Requirements](https://developer.bigcommerce.com/api-docs/apps/guide/requirements)\n* [Managing Apps in the Developer Portal](https://developer.bigcommerce.com/api-docs/apps/guide/developer-portal)\n* [Publishing an App](https://developer.bigcommerce.com/api-docs/apps/guide/publishing)"}],"children":[]}}}}
