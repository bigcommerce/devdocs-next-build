{"path":"api-docs/apps/guide/callbacks","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Building Apps","to":"/api-docs/apps"},{"content":"Guide","to":"/api-docs/apps/guide"},{"content":"Handling Callbacks","to":"/api-docs/apps/guide/callbacks"}],"page":{"meta":{"title":"Handling Callbacks - Guide - Building Apps - API Docs","url":"/api-docs/apps/guide/callbacks","description":"Single-Click App Callbacks\n\n\n\nOn this page\n\nOverview\n\nLoad callback\n\nUninstall callback\n\nRemove user callback\n\nVerifying the signed payload\n\nIdentifying..."},"title":"Handling Callbacks","parsedPath":["pages","/api-docs","data","children",4,"data","children",1,"data","children",5],"rootPagePath":"/api-docs","path":"/api-docs/apps/guide/callbacks","isSubpage":true,"route":{"path":"/callbacks"},"data":{"blocks":[{"type":"text","data":"# Single-Click App Callbacks\r\n\r\n\r\n<div class=\"otp\" id=\"no-index\">\r\n\r\n### On this page\r\n- [Overview](#overview)\r\n- [Load callback](#load-callback)\r\n- [Uninstall callback](#uninstall-callback)\r\n- [Remove user callback](#remove-user-callback)\r\n- [Verifying the signed payload](#verifying-the-signed-payload)\r\n- [Identifying users](#identifying-users)\r\n- [Code samples](#code-samples)\r\n- [Helpful tools](#helpful-tools)\r\n- [Next steps](#next-steps)\r\n- [Resources](#resources)\r\n\r\n</div>\r\n\r\nAfter installing a single-click app, store owners and authorized users *load* the app by clicking the app's icon in the control panel. Store owners can also *uninstall* your app and *remove users* they've authorized to use it. Each of these events triggers a `GET` request (or \"callback\") from BigCommerce to your app's callback URL configured in the [Developer Portal](https://devtools.bigcommerce.com/my/apps). This article describes how your app should handle each callback and explains how to [verify the `signed_payload`](#verifying-the-signed-payload) and [identify users](#identifying-users).\r\n\r\n## Overview\r\n\r\nThe table below contains a brief description of each callback. Note that only the `load` callback is required.\r\n\r\n| Event | Required? | Description |\r\n|-|-|-|\r\n| `load`  | yes | called when the store owner or user clicks to load the app |\r\n| `uninstall`  | no | called when the store owner clicks to uninstall the app |\r\n| `remove User` | no | called when the store admin revokes a user's access to the app |\r\n\r\nEach event triggers a `GET` request from BigCommerce containing a `signed_payload` that allows the app to:\r\n- Verify that the request came from BigCommerce.\r\n- Identify the store.\r\n- Identify the store owner or user.\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme: info -->\r\n\r\n### Note\r\n> * In a production, all app callback URLs must be publicly available, fully qualified, and served over TLS/SSL.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Load callback\r\n\r\nBigCommerce sends a `GET` request to your app's `load` URL when the store owner or user clicks to load the app.\r\n\r\n```http\r\nGET /load?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1\r\nHost: your_app.example.com\r\n```\r\n\r\nThe steps steps to handle this callback are as follows:\r\n1. [Verify the signed payload](#verifying-the-signed-payload).\r\n2. [Identify the user](#identifying-users).\r\n3. Respond with HTML for the control panel iFrame.\r\n\r\n## Uninstall callback\r\n\r\nBigCommerce sends a `GET` request to your app's `uninstall` URL when the store owner clicks to uninstall the app.\r\n\r\n```http\r\nGET /uninstall?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1\r\nHost: your_app.example.com\r\n```\r\n\r\nThe steps steps to handle this callback are as follows:\r\n1. [Verify the signed payload](#verifying-the-signed-payload).\r\n2. [Identify the user](#identifying-users).\r\n3. Remove the user's data from your app's database.\r\n\r\n## Remove user callback\r\n\r\nBigCommerce sends a `GET` request to your app's `remove user` callback when a store admin revokes a user's access to the app.\r\n\r\n```http\r\nGET /remove_user?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1\r\nHost: your_app.example.com\r\n```\r\n\r\nThe steps steps to handle this callback are as follows:\r\n1. [Verify the signed payload](#verifying-the-signed-payload).\r\n2. [Identify the user](#identifying-users).\r\n3. Remove the user's data from your app's database.\r\n\r\n## Verifying the signed payload\r\n\r\nThe `signed_payload` is comprised of two `.` separated **base64URL** encoded strings:\r\n\r\n```javascript\r\nencoded_json_string.encoded_hmac_signature\r\n```\r\n\r\n**To verify**:\r\n1. Split the `signed_payload` by the `.` delimiter.\r\n2. Decode the **base64url** `encoded_json_string`.\r\n3. Convert the decoded string into an object.\r\n4. Decode the **base64url** `encoded_hmac_signature`.\r\n5. Use your app's `client_secret` to verify the decoded `hmac_signature`.\r\n6. Sign the decoded `json_string` with your app's `client_secret`.\r\n7. Match<sup>1</sup> signed `json_string` against decoded `hmac_signature`.\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--warning\">\r\n<div class=\"HubBlock-content\">\r\n\r\n> ### Note\r\n> 1. To limit the vulnerability of an app to timing attacks, we recommend using a constant time string comparison function. How to accomplish this varies by programming language. For code samples in Ruby and PHP, see [Code samples](#code-samples) below; search for \"constant time string comparison {lang}\" using your preferred search engine for more information.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Identifying users\r\n\r\nAfter decoding and verifying the `signed_playload`, parse the JSON string into an object. Here's an example payload:\r\n\r\n```json\r\n{\r\n  \"user\": {\r\n    \"id\": 9128,\r\n    \"email\": \"user@mybigcommerce.com\"\r\n  },\r\n  \"owner\": {\r\n    \"id\": 9128,\r\n    \"email\": \"user@mybigcommerce.com\"\r\n  },\r\n  \"context\": \"stores/z4zn3wo\",\r\n  \"store_hash\": \"z4zn3wo\",\r\n  \"timestamp\": 1469823892.9123988\r\n}\r\n```\r\n\r\n| Name | Data Type | Value Description |\r\n|-|-|-|\r\n| `user.id` | int | ID of user initiating callback |\r\n| `user.email `| str | email of the user initiating callback |\r\n| `owner.id` | int | ID of store owner |\r\n| `owner.email` | str | email address of store owner. |\r\n| `context` | str | `stores/` + `store_hash`; ex: `stores/store_hash` |\r\n| `store_hash` | str | unique identified for store used in API requests |\r\n| `timestamp` | float | Unix time when callback generated|\r\n\r\nUse the data contained in the payload object to identify the store and user. What your app should do with this information is dependent on whether [**Multiple Users**](https://developer.bigcommerce.com/api-docs/apps/guide/users) is enabled in the [Developer Portal](https://devtools.bigcommerce.com/). Refer to the table below for instructions.\r\n\r\n| Callback | Multiple Users Enabled | Multiple Users Not Enabled |\r\n|-|-|-|\r\n| `Load` | Compare user to store owner or existing user; if no match, it's a new users; add them app's database. | should match store owner|\r\n| `Uninstall` | Compare user to store owner or existing user; only store owner can uninstall an app. | should match store owner |\r\n| `Remove user` | Compare user to users stored in app database; remove matching user from database. | `n/a` |\r\n\r\n## Code samples\r\n\r\n### Verifying signed_payload in PHP\r\n\r\n```php\r\nfunction verifySignedRequest($signedRequest)\r\n{\r\n    list($encodedData, $encodedSignature) = explode('.', $signedRequest, 2);\r\n\r\n    // decode the data\r\n    $signature = base64_decode($encodedSignature);\r\n        $jsonStr = base64_decode($encodedData);\r\n    $data = json_decode($jsonStr, true);\r\n\r\n    // confirm the signature\r\n    $expectedSignature = hash_hmac('sha256', $jsonStr, $clientSecret(), $raw = false);\r\n    if (!hash_equals($expectedSignature, $signature)) {\r\n        error_log('Bad signed request from BigCommerce!');\r\n        return null;\r\n    }\r\n    return $data;\r\n}\r\n```\r\n\r\n### Verifying signed_payload in Ruby\r\n```ruby\r\nrequire \"base64\"\r\nrequire \"openssl\"\r\n\r\ndef verify(signed_payload, client_secret)\r\n  message_parts = signed_payload.split(\".\")\r\n\r\n  encoded_json_payload = message_parts[0]\r\n  encoded_hmac_signature = message_parts[1]\r\n\r\n  payload_object = Base64.strict_decode(encoded_json_payload)\r\n  provided_signature = Base64.strict_decode(encoded_hmac_signature)\r\n\r\n  expected_signature = OpenSSL::HMAC::hexdigest(\"sha256\", client_secret, payload_object)\r\n\r\n  return false unless secure_compare(expected_signature, provided_signature)\r\n\r\n  JSON.parse(payload_object)\r\nend\r\n\r\ndef secure_compare(a, b)\r\n  return false if a.blank? || b.blank? || a.bytesize != b.bytesize\r\n  l = a.unpack \"C#{a.bytesize}\"\r\n\r\n  res = 0\r\n  b.each_byte { |byte| res |= byte ^ l.shift }\r\n  res == 0\r\nend\r\n```\r\n\r\n## Helpful tools\r\nThe following BigCommerce API clients expose helper methods for verifying the `signed_payload`:\r\n* [bigcommerce/bigcommerce-api-python](https://github.com/bigcommerce/bigcommerce-api-python)\r\n  * Fetches `access_token`\r\n  * Verifies `signed_payload`\r\n* [bigcommerce/node-bigcommerce](https://github.com/bigcommerce/node-bigcommerce/)\r\n  * Fetches `access_token`\r\n  * Verifies `signed_payload`\r\n\r\n## Next steps\r\n* [Support multiple users](https://developer.bigcommerce.com/api-docs/apps/guide/users)\r\n\r\n## Resources\r\n\r\n### Sample apps\r\n* [Node / React / Next.js](https://github.com/bigcommerce/sample-app-nodejs)\r\n* [Python / Flask](https://github.com/bigcommerce/hello-world-app-python-flask)\r\n* [PHP / Silex](https://github.com/bigcommerce/hello-world-app-php-silex)\r\n* [Ruby / Sinatra](https://github.com/bigcommerce/hello-world-app-ruby-sinatra)\r\n* [Laravel / React](https://github.com/bigcommerce/laravel-react-sample-app)\r\n* [Node / FaunaDB / Netlify](https://github.com/bigcommerce/channels-app/)\r\n\r\n### Tools\r\n* [Node API Client](https://github.com/bigcommerce/node-bigcommerce/)\r\n* [Python API Client](https://github.com/bigcommerce/bigcommerce-api-python)\r\n* [PHP API Client](https://github.com/bigcommerce/bigcommerce-api-php)\r\n* [Ruby API Client](https://github.com/bigcommerce/bigcommerce-api-ruby)\r\n* [Ruby OmniAuth Gem](https://github.com/bigcommerce/omniauth-bigcommerce)\r\n* [Big Design Developer Playground](https://developer.bigcommerce.com/big-design/)\r\n* [Figma UI Kit](https://www.figma.com/file/jTVuUkiZ1j3rux8WHG4IKK/BigDesign-UI-Kit?node-id=0%3A1/duplicate)\r\n* [Adobe Illustrator UI Kit](https://design.bigcommerce.com/bigdesign-ui-kit)\r\n\r\n### Blog posts\r\n* [How to Test App Authentication Locally with ngrok](https://medium.com/bigcommerce-developer-blog/how-to-test-app-authentication-locally-with-ngrok-149150bfe4cf)\r\n* [Building a BigCommerce App Using Laravel and React](https://medium.com/bigcommerce-developer-blog/building-a-bigcommerce-app-using-laravel-and-react-711ceceb5006)\r\n* [Big Design Tutorial](https://medium.com/bigcommerce-developer-blog/bigdesign-build-native-looking-uis-with-the-bigcommerce-design-system-fb06a01a24f2)\r\n"}],"children":[]}}}}
