{"path":"api-docs/store-management/webhooks/tutorial","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Management APIs","to":"/api-docs/store-management"},{"content":"Webhooks","to":"/api-docs/store-management/webhooks"},{"content":"Webhooks Tutorial","to":"/api-docs/store-management/webhooks/tutorial"}],"page":{"meta":{"title":"Webhooks Tutorial - Webhooks - Management APIs - API Docs","url":"/api-docs/store-management/webhooks/tutorial","description":"Webhooks Tutorial\n\n\n\nOn this page\n\nCreate an Express app\n\nStart the app\n\nCreate a webhook\n\nTrigger the webhook event\n\nAdding custom headers\n\nTroubleshoo..."},"title":"Webhooks Tutorial","parsedPath":["pages","/api-docs","data","children",2,"data","children",12,"data","children",2],"rootPagePath":"/api-docs","path":"/api-docs/store-management/webhooks/tutorial","isSubpage":true,"route":{"path":"/tutorial"},"data":{"blocks":[{"type":"text","data":"# Webhooks Tutorial\r\n\r\n<div class=\"otp\" id=\"no-index\">\r\n\r\n### On this page\r\n\r\n- [Create an Express app](#create-an-express-app)\r\n- [Start the app](#start-the-app)\r\n- [Create a webhook](#create-a-webhook)\r\n- [Trigger the webhook event](#trigger-the-webhook-event)\r\n- [Adding custom headers](#adding-custom-headers)\r\n- [Troubleshooting](#troubleshooting)\r\n- [Resources](#resources)\r\n\r\n</div>\r\n\r\nIn this tutorial, we'll create a Node.js Express app that handless webhook callbacks and uses [ngrok](https://ngrok.com/) (ngrok.com) to expose the app to the Internet. Then, we'll create a webhook and observe the callback using the ngrok web interface when the event is triggered.\r\n\r\n\r\n### Prerequisites\r\n\r\n- [API Access Token](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication) with [scope](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes) set to **Information & Settings** read-only and **Products** read-only.\r\n- [Webhooks Overview](https://developer.bigcommerce.com/api-docs/store-management/webhooks/overview)\r\n- Familiarity with working in the terminal\r\n- Familiarity working with `node` and `npm`\r\n## Create an Express app\r\n\r\nFirst, let's make a `webhooks-test` directory and initialize a Node.js Express app inside of it. To do so, run the following commands in the terminal.\r\n\r\n\r\n```bash\r\nmkdir webhooks-test         # Create project directory\r\n\r\ncd webhooks-test            # Move into project directory\r\n\r\nnpm init                    # Initialize a Node.js project (hit return to accept the default values)\r\n\r\n\r\nnpm install express --save  # Install express\r\n\r\nnpm install ngrok           # install node wrapper for ngrok\r\n\r\ntouch index.js              # Create main app script file\r\n\r\n```\r\n\r\nThen, copy and paste the following JavaScript code into `index.js`.\r\n\r\n\r\n\r\n```js\r\nconst express = require('express');\r\nconst ngrok = require('ngrok')\r\nconst app = express();\r\n\r\n// when there's a post request to /webhooks...\r\napp.post('/webhooks', function (req, res) {\r\n\r\n    // respond with 200 OK\r\n    res.send('OK');\r\n});\r\n\r\n// listen to port 3000\r\napp.listen(3000, function () {\r\n    console.log('Listening for webhooks on port 3000');\r\n\r\n    // start ngrok and create a tunnel to port 3000\r\n    (async function() {\r\n        const url = await ngrok.connect(3000);\r\n    })();\r\n})\r\n```\r\n\r\nThis app listens to requests on port `3000`, then responds with a `200` status once it receives a `POST` request to `/webhooks`.\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n> ### Note\r\n> * Ngrok is a helpful tool for viewing webhook callbacks BigCommerce sends to your app. Ngrok creates a publicly accessible tunnel URL to an application running on your machine. When using ngrok you can view HTTP request details in its web interface.\r\n> * For simplicity, this tutorial uses an [npm package](https://www.npmjs.com/package/ngrok) to install and run ngrok. For official ngrok usage and installation instructions, visit [ngrok.com](https://ngrok.com/).\r\n\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Start the app\r\n\r\nTo start the app, run the following commands:\r\n\r\n\r\n```bash\r\ncd ~/path/to/webhooks-test # Make sure you're in your webhooks-test project directory\r\n\r\nnode index.js              # Start the app\r\n```\r\n\r\nNavigate to `http://localhost:4040/` in your browser. You should see the ngrok web interface like shown in the image below. Copy the HTTPS tunnel URL and keep the app running.\r\n\r\n![ngrok web interface](//s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661 \"ngrok web interface\")\r\n\r\n## Create a webhook\r\n\r\nNow, we'll create a webhook that subscribes to the `store/product/updated` [webhook event](https://developer.bigcommerce.com/api-docs/store-management/webhooks/events). To do so, send a `POST` request to `/stores/{{STORE_HASH}}/v3/hooks`.\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n \"scope\": \"store/product/updated\",\r\n \"destination\": \"https://6a35e97b.ngrok.io/webhooks\", # Replace 6a35e97b.ngrok.io with your HTTPS tunnel URL\r\n\r\n \"is_active\": true\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/store-management/webhooks/webhooks/createwebhooks#requestrunner)\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n> ### Note\r\n> * Be sure to replace `6a35e97b.ngrok.io` with your ngrok HTTPS tunnel URL.\r\n> * Currently, BigCommerce does not support desination URLs served over custom HTTPS ports. Use the default HTTPS port 443.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Trigger the webhook event\r\n\r\nWebhooks fire when shoppers perform actions on the storefront and when users make changes in the control panel. They will also fire when you make changes using an API. Trigger the webhook you just created by performing the following actions in your BigCommerce control panel:\r\n\r\n\r\n1. Navigate to **Products** > [**View**](https://login.bigcommerce.com/deep-links/manage/products).\r\n2. Edit a product and change something like **name** or **description**.\r\n3. Click **Save**.\r\n\r\nNow, visit the ngrok web interface address (`http://127.0.0.1:4040`) and check for a `200` response.\r\n\r\n![ngrok Web Interface](//s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565 \"ngrok Web Interface\")\r\n\r\nThe summary shows the webhook fired and our Express app returned a `200` response along with the text OK. The response is generated by `res.send(â€˜OK')` in our app code. For more information, see [Express Routing](https://expressjs.com/en/guide/routing.html).\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--warning\">\r\n<div class=\"HubBlock-content\">\r\n\r\n> ### Note\r\n>\r\n> * Unless you have a paid ngrok account, the destination URL will only be valid for a few hours. After that, the webhook will stop working. Send a `DELETE` request to the specific webhook ID to disable the hook.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Adding custom headers\r\n\r\nYou can add custom headers to your create webhook request for added security. The `headers` property accepts any key-value pair as a string. BigCommerce will include the headers in callback requests made to your application.\r\n\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/hooks\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n\"scope\": \"store/cart/lineItem/*\",\r\n  \"destination\": \"https://myapp.herokuapp.com/\",\r\n  \"is_active\": true,\r\n  \"headers\": {\r\n    \"Authorization\": \"Basic SGVsbG86R29vZGJ5ZQ==\"\r\n  }\r\n}\r\n```\r\n\r\n## Troubleshooting\r\n\r\n**Custom ports**\r\n\r\nCurrently, BigCommerce does not support destination URLs served over custom HTTPS ports. Use the default HTTPS port `443`.\r\n\r\n**Getting a `404` error using the root (/) url?**\r\n\r\nAdd this snippet to your code to respond to incoming `GET` requests with 'hello':\r\n\r\n\r\n```js\r\napp.get('/',(req, res)=>{\r\n    res.send('Hello!');\r\n});\r\n```\r\n\r\n**Getting error \"ngrok not found\"?**\r\n\r\nThere are two ways to fix this. Your local setup will determine which command will work.\r\nUse the command `mv ngrok /usr/local/bin `to move ngrok to your local bin folder. This way it becomes available globally.\r\nUse the command `./ngrok http 3000` to run ngrok as a sudo user.\r\n\r\n**Windows users**\r\n\r\nIf you are having trouble getting ngrok started, try setting the PATH.\r\n\r\n    - [What are PATH and other environment variables, and how can I set or use them?](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them)\r\n\r\n## Resources\r\n* [Webhooks Overview](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/about-webhooks)\r\n* [Webhook Events](https://developer.bigcommerce.com/api-docs/store-management/webhooks/webhook-events)\r\n* [Webhooks Reference](https://developer.bigcommerce.com/api-reference/webhooks)\r\n"}],"children":[]}}}}
