{"path":"api-docs/store-management/widgets/tutorials/dynamic-widgets","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Management APIs","to":"/api-docs/store-management"},{"content":"Widgets","to":"/api-docs/store-management/widgets"},{"content":"Tutorials","to":"/api-docs/store-management/widgets/tutorials"},{"content":"Create Widgets Powered by GraphQL","to":"/api-docs/store-management/widgets/tutorials/dynamic-widgets"}],"page":{"meta":{"title":"Create Widgets Powered by GraphQL - Tutorials - Widgets - Management APIs - API Docs","url":"/api-docs/store-management/widgets/tutorials/dynamic-widgets","description":"Create Widgets Powered by GraphQL\n\n\n\nOn this page\n\nPrerequisites\n\nCreate the widget template\n\nPlace the widget using Page Builder\n\nPlace the widget usin..."},"title":"Create Widgets Powered by GraphQL","parsedPath":["pages","/api-docs","data","children",2,"data","children",11,"data","children",3,"data","children",3],"rootPagePath":"/api-docs","path":"/api-docs/store-management/widgets/tutorials/dynamic-widgets","isSubpage":true,"route":{"path":"/dynamic-widgets"},"data":{"blocks":[{"type":"text","data":"# Create Widgets Powered by GraphQL\n\n<div class=\"otp\" id=\"no-index\">\n\n### On this page\n- [Prerequisites](#prerequisites)\n- [Create the widget template](#create-the-widget-template)\n- [Place the widget using Page Builder](#place-the-widget-using-page-builder)\n- [Place the widget using the API](#place-the-widget-using-the-api)\n- [Related resources](#related-resources)\n\n</div>\n\nWidgets are configurable and reusable components of content that merchants can display on their storefront. Widgets consist of a combination of HTML/CSS, JavaScript, and Handlebars, and are rendered as part of the storefront’s HTML.\n\nIn this tutorial, we will walk you through the process of creating a product widget powered by BigCommerce's [Widgets API](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview) and [GraphQL Storefront API](https://developer.bigcommerce.com/api-docs/storefront/graphql/graphql-storefront-api-overview). This setup allows widgets to dynamically update and display information such as product name, image, and price. By the end of this tutorial, you should have a functional widget that is configurable via the [Page Builder](https://support.bigcommerce.com/s/article/Page-Builder) UI in a store's control panel.\n\n## Prerequisites\n\n* [A BigCommerce store](https://support.bigcommerce.com/s/article/Starting-a-Bigcommerce-Trial).\n* API OAuth [access token](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication) with the OAuth **Content** scope set to **modify**.\n* Understanding of [widgets](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview#widgets) and the [Widgets API](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview).\n* Familiarity with [Page Builder](https://developer.bigcommerce.com/stencil-docs/page-builder/page-builder-overview).\n\nThe steps in this tutorial assume that you are familiar with BigCommerce’s Widgets API, and have obtained the API `access_token` with the `content` `modify` scope. The API `access_token` is required to inject, remove, and list widgets into any page of the store. To learn more about the Widgets API, see [Widgets API Overview](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview). For information on how to create an API account, see [Creating an API Account](https://support.bigcommerce.com/s/article/Store-API-Accounts#creating).\n\n## Create the widget template\n\nTo create a widget, you first need to create a template for it. To [create a widget template](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget-template/createwidgettemplate), send a `POST` request to `/v3/content/widget-templates`. \n\n\n```http\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/widget-templates\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n \n{\n  \"name\": \"Product Widget\",\n  \"storefront_api_query\": \"query Product($productId: Int = 1, $activeCurrencyCode: currencyCode) { site { product(entityId: $productId) { name entityId prices(currencyCode: $activeCurrencyCode) { price { currencyCode value } } defaultImage { url(width: 500, height: 500) } } } } \",\n  \"schema\": [\n    {\n      \"type\": \"hidden\",\n      \"settings\": [\n        {\n          \"type\": \"graphQl\",\n          \"id\": \"graphQueries\",\n          \"typeMeta\": {\n            \"mappings\": {\n              \"productId\": {\n                \"reads\": \"productId\",\n                \"type\": \"Int!\"\n              }\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"type\": \"tab\",\n      \"label\": \"Content\",\n      \"sections\": [\n        {\n          \"label\": \"Product\",\n          \"settings\": [\n            {\n              \"type\": \"productId\",\n              \"label\": \"Product\",\n              \"id\": \"productId\",\n              \"default\": \"\",\n              \"typeMeta\": {\n                \"placeholder\": \"Search by name or SKU\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"template\": \"<div style=\\\"text-align:center\\\">\\n<h1>{{_.data.site.product.name}}</h1>\\n<div>\\n<img src=\\\"{{_.data.site.product.defaultImage.url}}\\\">\\n</div>\\n<div>\\n<p>${{_.data.site.product.prices.price.value}}</p>\\n</div>\\n</div>\"\n}\n```\n\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget-template/createwidgettemplate#requestrunner)\n\n**[Response:](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget-template/createwidgettemplate#responses)**\n\n```json\n{\n  \"data\": {\n    \"channel_id\": 1,\n    \"client_rerender\": false,\n    \"current_version_uuid\": \"3f4defcf-2429-425d-8e5a-7c3807fa9896\",\n    \"date_created\": \"2021-04-09T21:23:16.274Z\",\n    \"date_modified\": \"2021-04-09T21:23:16.274Z\",\n    \"icon_name\": \"default\",\n    \"kind\": \"custom\",\n    \"name\": \"Product Widget\",\n    \"schema\": [\n      {\n        \"settings\": [\n          {\n            \"id\": \"graphQueries\",\n            \"type\": \"graphQl\",\n            \"typeMeta\": {\n              \"mappings\": {\n                \"productId\": {\n                  \"reads\": \"productId\",\n                  \"type\": \"Int!\"\n                }\n              }\n            }\n          }\n        ],\n        \"type\": \"hidden\"\n      },\n      {\n        \"label\": \"Content\",\n        \"sections\": [\n          {\n            \"label\": \"Product\",\n            \"settings\": [\n              {\n                \"default\": \"\",\n                \"id\": \"productId\",\n                \"label\": \"Product\",\n                \"type\": \"productId\",\n                \"typeMeta\": {\n                  \"placeholder\": \"Search by name or SKU\"\n                }\n              }\n            ]\n          }\n        ],\n        \"type\": \"tab\"\n      }\n    ],\n    \"storefront_api_query\": \"query Product($productId: Int = 1, $activeCurrencyCode: currencyCode) { site { product(entityId: $productId) { name entityId prices(currencyCode: $activeCurrencyCode) { price { currencyCode value } } defaultImage { url(width: 500, height: 500) } } } } \",\n    \"template\": \"<div style=\\\"text-align:center\\\">\\n<h1>{{_.data.site.product.name}}</h1>\\n<div>\\n<img src=\\\"{{_.data.site.product.defaultImage.url}}\\\">\\n</div>\\n<div>\\n<p>${{_.data.site.product.prices.price.value}}</p>\\n</div>\\n</div>\",\n    \"template_engine\": \"handlebars_v3\",\n    \"uuid\": \"95eaa664-b19e-4a31-b9c7-498f9bc60bae\"\n  },\n  \"meta\": {}\n}\n```\n\n|Property|Type|Description|\n|-|-|-|\n|`name`|string|The name of the widget template.|\n|`schema`|object|The widget settings JSON [schema](https://developer.bigcommerce.com/stencil-docs/page-builder/widget-ui-schema) for [Page Builder](https://support.bigcommerce.com/s/article/Page-Builder) UI.|\n|`template`|string|The [widget template](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview#widget-templates) rendered as Handlebars HTML.|\n|`storefront_api_query`|string|[GraphQL Storefront API](https://developer.bigcommerce.com/api-docs/storefront/graphql/graphql-storefront-api-overview) query that provides widget data; accessed in a template via `{{_.data}}`.|\n\n### GraphQL queries\n\nThe `storefront_api_query` field allows you to query store data that widgets can use. The widget configuration provides the values for the `storefront_api_query` parameters.\nFor example, the `$productId` parameter comes from the widget configuration when a user selects a product. The `mappings` object from the widget template schema `settings` tells the widget to map the value of the widget configuration’s `productId` setting to the GraphQL parameter called `productId`.\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> * You can use the `activeCurrencyCode` query parameter to return user-selected currency.\n> * There is no need to provide the mapping for the `activeCurrencyCode` property as it is auto-populated with the shopper’s active currency at the time of page load.\n\n</div>\n</div>\n</div>\n\n## Place the widget using Page Builder\n\nAfter [creating the widget template](#create-the-widget-template), you should see it listed in Page Builder under **Custom**.\n\n![Custom widgets](https://raw.githubusercontent.com/bigcommerce/dev-docs/master/assets/images/product-widget-01.png \"Custom widgets\")\n\nDrag and drop the widget onto the desired page, select a product from the product picker, then publish your widget. \n\n![Product widget preview](https://raw.githubusercontent.com/bigcommerce/dev-docs/master/assets/images/product-widget-02.png \"Product widget preview\")\n\nDoing so creates a [widget](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/createwidget) and a [widget placement](https://developer.bigcommerce.com/api-reference/store-management/widgets/placement/createplacement). For more information on placing and configuring widgets in the control panel, see [Page Builder](https://support.bigcommerce.com/s/article/Page-Builder) in the Help Center.\n\nTo view the widget's data, retrieve the widget's ID by accessing its `data-widget-id` attribute in the browser's developer tools, then pass it in a `GET` request to [`/v3/content/widgets/{uuid}`](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/getwidget).\n\nAlternatively, you can send a `GET` request to [`/v3/content/widgets`](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/getwidgets), passing your `widget_template_uuid` as a query parameter.\n\nThe [response](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/getwidget#responses) should be similar to the following example:\n\n```json\n\n{\n  \"data\": [\n    {\n      \"channel_id\": 1,\n      \"date_created\": \"2021-04-09T21:27:21.163Z\",\n      \"date_modified\": \"2021-04-09T21:40:47.892Z\",\n      \"description\": \"\",\n      \"name\": \"Product Widget\",\n      \"storefront_api_query_params\": {\n        \"productId\": 77\n      },\n      \"uuid\": \"7e6d7a11-164e-4eb1-ae0a-af07f3e2c8fb\",\n      \"version_uuid\": \"3f4defcf-2429-425d-8e5a-7c3807fa9896\",\n      \"widget_configuration\": {\n        \"_\": {\n          \"id\": \"7e6d7a11-164e-4eb1-ae0a-af07f3e2c8fb\"\n        },\n        \"productId\": \"77\"\n      },\n      \"widget_template\": {\n        \"channel_id\": 1,\n        \"client_rerender\": false,\n        \"current_version_uuid\": \"3f4defcf-2429-425d-8e5a-7c3807fa9896\",\n        \"date_created\": \"2021-04-09T21:23:16.274Z\",\n        \"date_modified\": \"2021-04-09T21:23:16.274Z\",\n        \"icon_name\": \"default\",\n        \"kind\": \"custom\",\n        \"name\": \"Product Widget\",\n        \"schema\": [\n          {\n            \"settings\": [\n              {\n                \"id\": \"graphQueries\",\n                \"type\": \"graphQl\",\n                \"typeMeta\": {\n                  \"mappings\": {\n                    \"productId\": {\n                      \"reads\": \"productId\",\n                      \"type\": \"Int!\"\n                    }\n                  }\n                }\n              }\n            ],\n            \"type\": \"hidden\"\n          },\n          {\n            \"label\": \"Content\",\n            \"sections\": [\n              {\n                \"label\": \"Product\",\n                \"settings\": [\n                  {\n                    \"default\": \"\",\n                    \"id\": \"productId\",\n                    \"label\": \"Product\",\n                    \"type\": \"productId\",\n                    \"typeMeta\": {\n                      \"placeholder\": \"Search by name or SKU\"\n                    }\n                  }\n                ]\n              }\n            ],\n            \"type\": \"tab\"\n          }\n        ],\n        \"storefront_api_query\": \"query Product($productId: Int = 1, $activeCurrencyCode: currencyCode) { site { product(entityId: $productId) { name entityId prices(currencyCode: $activeCurrencyCode) { price { currencyCode value } } defaultImage { url(width: 500, height: 500) } } } } \",\n        \"template\": \"<div style=\\\"text-align:center\\\">\\n<h1>{{_.data.site.product.name}}</h1>\\n<div>\\n<img src=\\\"{{_.data.site.product.defaultImage.url}}\\\">\\n</div>\\n<div>\\n<p>${{_.data.site.product.prices.price.value}}</p>\\n</div>\\n</div>\",\n        \"template_engine\": \"handlebars_v3\",\n        \"uuid\": \"95eaa664-b19e-4a31-b9c7-498f9bc60bae\"\n      }\n    }\n  ],\n  \"meta\": {...}\n}\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n>\n> The value of the `productId` inside of the `widget_configuration` object is mapped to the `productId` parameter of the `storefront_api_query_params` object.\n\n</div>\n</div>\n</div>\n\n## Place the widget using the API\n\nIt is also possible to place widgets programmatically using the API. First, [create a widget](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/createwidget) by sending a `POST` request to `/v3/content/widgets`.\n\n```http\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/widgets\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"name\": \"Product Widget\",\n  \"widget_template_uuid\": \"{{TEMPLATE_UUID}}\"\n}\n```\n\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/createwidget#requestrunner)\n\nTake note of the widget's `uuid` returned in the [response](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/createwidget#responses). You will need the widget's `uuid` to [create a placement](https://developer.bigcommerce.com/api-reference/store-management/widgets/placement/createplacement) for your widget.\n\n\n**Response:**\n```json\n{\n  \"data\": {\n    \"uuid\": \"{{WIDGET_UUID}}\",\n    ...\n  }\n}\n```\n\nTo [create a placement](https://developer.bigcommerce.com/api-reference/store-management/widgets/placement/createplacement), send a `POST` request to `/v3/content/placements`.\n\n```http\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/placements\nX-Auth-Token: {{ACCESS_TOKEN}}\nContent-Type: application/json\nAccept: application/json\n\n{\n  \"widget_uuid\": \"{{WIDGET_UUID}}\",\n  \"template_file\": \"{{TEMPLATE_FILE}}\",\n  \"status\": \"active\",\n  \"region\": \"{{REGION}}\"\n}\n```\n\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/store-management/widgets/placement/createplacement#requestrunner)\n\nFor a list of accepted `template_file` values, see [create a placement](https://developer.bigcommerce.com/api-reference/storefront/widgets-api/placement/createplacement).\n\nTo [get a list of theme regions](https://developer.bigcommerce.com/api-reference/storefront/widgets-api/regions/getcontentregions) for the `region` property, send a `GET` request to `/v3/content/regions?template_file={{TEMPLATE_FILE}}`.\n\n```http\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/content/regions?template_file={{TEMPLATE_FILE}}\nX-Auth-Token: {{ACCESS_TOKEN}}\nAccept: application/json\n```\n\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/storefront/widgets-api/regions/getcontentregions#requestrunner)\n\n## Related resources\n\n### Articles\n* [GraphQL Storefront API Overview](https://developer.bigcommerce.com/api-docs/storefront/graphql/graphql-storefront-api-overview)\n* [Page Builder Overview](https://developer.bigcommerce.com/stencil-docs/page-builder/page-builder-overview)\n* [Widgets API Overview](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview)\n* [Widget UI Schema](https://developer.bigcommerce.com/stencil-docs/page-builder/widget-ui-schema)\n\n### Endpoints \n* [Widgets API](/api-reference/store-management/widgets)\n"}],"children":[]}}}}
