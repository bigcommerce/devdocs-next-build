{"path":"api-docs/store-management/catalog/catalog-overview","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Management APIs","to":"/api-docs/store-management"},{"content":"Catalog","to":"/api-docs/store-management/catalog"},{"content":"Overview","to":"/api-docs/store-management/catalog/catalog-overview"}],"page":{"meta":{"title":"Overview - Catalog - Management APIs - API Docs","url":"/api-docs/store-management/catalog/catalog-overview","description":"Catalog Overview\n\n\n\nOn this page\n\nOAuth scopes\n\nProducts overview\n\nCreating products with variant options\n\nCreating digital products\n\nAdding product ima..."},"title":"Overview","parsedPath":["pages","/api-docs","data","children",2,"data","children",0,"data","children",0],"rootPagePath":"/api-docs","path":"/api-docs/store-management/catalog/catalog-overview","isSubpage":true,"route":{"path":"/catalog-overview"},"data":{"blocks":[{"type":"text","data":"# Catalog Overview\r\n\r\n<div class=\"otp\" id=\"no-index\">\r\n\r\n### On this page\r\n- [OAuth scopes](#oauth-scopes)\r\n- [Products overview](#products-overview)\r\n- [Creating products with variant options](#creating-products-with-variant-options)\r\n- [Creating digital products](#creating-digital-products)\r\n- [Adding product images](#adding-product-images)\r\n- [Adding product videos](#adding-product-videos)\r\n- [Adding custom fields](#adding-custom-fields)\r\n- [Adding bulk pricing rules](#adding-bulk-pricing-rules)\r\n- [Pricing precision](#pricing-precision)\r\n- [Adding product metafields](#adding-product-metafields)\r\n- [Adding product reviews](#adding-product-reviews)\r\n- [Variant options](#variant-options)\r\n- [Variants](#variants)\r\n- [Creating variants](#creating-variants)\r\n- [Modifier options](#modifier-options)\r\n- [Complex rules](#complex-rules)\r\n- [Creating brands](#creating-brands)\r\n- [Categories](#categories)\r\n- [Product Sort Order](#product-sort-order)\r\n- [Related resources](#related-resources)\r\n\r\n</div>\r\n\r\nThe Catalog refers to a store's collection of physical and digital products. The Catalog includes all the information about a product such as MPN, warranty, price, and images.\r\n\r\n## OAuth scopes\r\n\r\n| UI Name  | Permission | Parameter                     |\r\n|----------|------------|-------------------------------|\r\n| Products | modify     | `store_v2_products`           |\r\n| Products | read-only  | `store_v2_products_read_only` |\r\n\r\nFor more information on OAuth Scopes and authentication, see [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).\r\n\r\n## Products overview\r\n\r\n[Products](/api-reference/store-management/catalog/products/getproducts) are the primary catalog entity, and the primary function of the ecommerce platform is to sell products on the storefront and other channels.\r\n\r\n\r\nProducts can be physical or digital:\r\n* **Physical** - Exist in a physical form, have a weight, and are sold by merchants to ship to customers.\r\n\r\n* **Digital** - Non-physical products, including downloadable files (for example, computer software, ebooks, or music) and services (for example, haircuts, consulting, or lawn care).\r\n\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Note\r\n> Only one product can be created at a time.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n### Creating a product\r\n\r\nBelow is an example `POST` request for creating a simple product without variant options or modifiers.\r\n\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"name\": \"BigCommerce Coffee Mug\",\r\n  \"price\": \"10.00\",\r\n  \"categories\": [\r\n    23,\r\n    21\r\n  ],\r\n  \"weight\": 4,\r\n  \"type\": \"physical\"\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/products/createproduct#requestrunner)\r\n\r\n## Creating products with variant options\r\n\r\nTo create a complex product with variant options selectable by shoppers, include a `variants` array in the request body.\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"name\": \"BigCommerce Coffee Mug\",\r\n  \"price\": \"10.00\",\r\n  \"categories\": [\r\n    23,\r\n    21\r\n  ],\r\n  \"weight\": 4,\r\n  \"type\": \"physical\",\r\n  \"variants\": [\r\n    {\r\n      \"sku\": \"SKU-BLU\",\r\n      \"option_values\": [\r\n        {\r\n          \"option_display_name\": \"Mug Color\",\r\n          \"label\": \"Blue\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"sku\": \"SKU-GRAY\",\r\n      \"option_values\": [\r\n        {\r\n          \"option_display_name\": \"Mug Color\",\r\n          \"label\": \"Gray\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/products/createproduct#requestrunner)\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Note\r\n> When you create options via `/products`, `display_type` defaults to a radio button (displayed as selectable boxes in some themes).\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Creating digital products\r\n\r\nTo create a digital product (like an ebook), set `type` to `digital`.\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"name\": \"ebook: A Guide to Coffee\",\r\n  \"price\": \"10.00\",\r\n  \"categories\": [\r\n    23,\r\n    21\r\n  ],\r\n  \"type\": \"digital\",\r\n  \"images\": [\r\n    {\r\n      \"is_thumbnail\": true,\r\n      \"image_url\": \"{{image_url}}\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/products/createproduct#requestrunner)\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Note\r\n> Files can only be added to digital products via [control panel or WebDav](https://support.bigcommerce.com/s/article/Creating-Downloadable-Products) -- attaching via the API is not supported. You can also set additional settings such as file description and maximum downloads in the control panel.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n\r\n## Adding product images\r\n\r\nTo add an image to a product, send a `POST` request to `/v3/catalog/products/{{product_id}}/images`.\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/images\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"is_thumbnail\": true,\r\n  \"sort_order\": 1,\r\n  \"description\": \"Yellow Large Bath Towel\",\r\n  \"image_url\": \"{{image_url}}\"\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-images/createproductimage#requestrunner)\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n### Note\r\n> * If using `image_file`, set `Content-Type` header to `multipart/form-data` -- otherwise, you will be unable to add subsequent requests.\r\n> * Set `is_thumbmail` to true to set the image as the thumbnail used on product listing pages.\r\n> * A product can have only one thumbnail image at a time.\r\n> * If only one image is on the product, it becomes both the thumbnail and the main product image.\r\n> * You can also add images to [variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid).\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Adding product videos\r\n\r\nTo add a video hosted on YouTube as a product video, send a `PUT` request to `/v3/catalog/products/{{product_id}}/videos`.\r\n\r\n```http\r\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/videos\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"title\": \"BigCommerce Mug Video\",\r\n  \"description\": \"Video Describing the Mug\",\r\n  \"sort_order\": 1,\r\n  \"type\": \"youtube\",\r\n  \"video_id\": \"R12345677\"\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-videos/createproductvideo#requestrunner)\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n### Note\r\n> * A product can have more than one video.\r\n> * You must host product videos on YouTube.\r\n> * `video_id` corresponds to the `v` parameter in the URL (Ex: `https://www.youtube.com/watch?v=R12345677`).\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Adding custom fields\r\n\r\nTo add custom fields to a product, send a `POST` request to `/v3/catalog/products/{{product_id}}/custom-fields`.\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/custom-fields\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"name\": \"Release Year\",\r\n  \"value\": \"2018\"\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/product-custom-fields/createcustomfield#requestrunner)\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Note\r\n> Custom field values are limited to **250** characters. For additional information on custom fields and their use cases, see [Custom Fields](https://support.bigcommerce.com/s/article/Custom-Fields).\r\n\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Adding bulk pricing rules\r\n\r\nTo add bulk quantity-based pricing to products, send a `PUT` request to `/v3/catalog/products/{{product_id}}/bulk-pricing-rules`.\r\n\r\n```http\r\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/bulk-pricing-rules\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"bulk_pricing_rules\": [\r\n    {\r\n      \"quantity_min\": 10,\r\n      \"quantity_max\": 15,\r\n      \"type\": \"price\",\r\n      \"amount\": 3\r\n    },\r\n    {\r\n      \"quantity_min\": 16,\r\n      \"quantity_max\": 25,\r\n      \"type\": \"price\",\r\n      \"amount\": 5\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/product-bulk-pricing-rules/updatebulkpricingrule#requestrunner)\r\n\r\nFor general information and use cases for product bulk pricing, see [Bulk Pricing](https://support.bigcommerce.com/s/article/Bulk-Pricing).\r\n\r\n## Pricing precision\r\n\r\nBigCommerce pricing is precise up to `4` decimal places. For example:\r\n\r\n* `\"$ 10.99999` rounds up to `$ 11`\r\n* `\"$ 10.99994` rounds down to `$ 10.9999`\r\n\r\nCurrency display settings allow for more than four decimal places. In such cases, the additional decimal places will display as `0`s.\r\n\r\n## Adding product metafields\r\n\r\n[Metafields](/api-reference/store-management/catalog/product-metafields/createproductmetafield) are key-value pairs intended for programmatically storing data against a product or other entity. Data stored in metafields does not appear in the storefront or the control panel. Data not appearing in the storefront or control panel is useful when information needs to be passed back and forth between an app and BigCommerce.\r\n\r\n\r\nTo add metafields to a product, send a `PUT` request to `/v3/catalog/products/{{product_id}}/metafields`.\r\n\r\n```http\r\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/metafields\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"permission_set\": \"read\",\r\n  \"namespace\": \"Location\",\r\n  \"key\": \"bin_number\",\r\n  \"value\": \"#4456\",\r\n  \"description\": \"location of the product\",\r\n  \"resource_type\": \"product\",\r\n  \"resource_id\": 131\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/product-metafields/updateproductmetafield#requestrunner)\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n### Note\r\n> You can add metafields to variants, products, categories, and brands.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Adding product reviews\r\n\r\nTo add product reviews to a product, send a `POST` request to `/v3/catalog/products/{{product_id}}/reviews`.\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/reviews\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"title\": \"Great Coffee Mug\",\r\n  \"text\": \"This coffee mug kept my liquids hot for several hours.\",\r\n  \"status\": \"pending\",\r\n  \"rating\": 5,\r\n  \"email\": \"testing@bigcommerce.com\",\r\n  \"name\": \"BigCommerce\",\r\n  \"date_reviewed\": \"2018-07-20T17:45:13+00:00\"\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-reviews/createproductreview#requestrunner)\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n### Note\r\n> You cannot create reviews in the control panel.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Variant options\r\n\r\n[Variant options](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-variant-options) are any choices that the shopper needs to make that will result in selecting a variant. Color and size are typical examples of variant options.  A t-shirt can have different combinations of sizes and colors.\r\n\r\nExample:\r\n* Color is a variant option; red, orange, and green are variant option values.\r\n* Size is a variant option; small, medium, and large are variant option values.\r\n\r\nThis example results in selecting a combination of small and red on the storefront and correlates to a product variation, also called a SKU.\r\n\r\n**Variant options:**\r\n\r\n* Require the shopper to select a value\r\n* Only support “multiple choice” option types\r\n* Rectangle\r\n* Radio button\r\n* Color swatch\r\n* Product pick list\r\n* Product pick list with images\r\n* Will automatically generate variants when created in the control panel\r\n* Are auto-generated from variants when you create a product with variants using the [Products](https://developer.bigcommerce.com/api-reference/store-management/catalog/products/createproduct) endpoint\r\n\r\n### Variant options example\r\n\r\n\r\n| Product | Variant option |\r\n| -- | -- |\r\n| T-Shirt | Blue<br>-<br>Small<br> Medium<br> Large|\r\n| Backpack | Black<br> Yellow<br>-<br>2L <br> 3L<br> 8L |\r\n\r\n### Options created on V2 and V3\r\n\r\n* If a product has variant options created using the V2 API, you cannot add additional variant options using the V3 API.\r\n* SKUs in V2 map to variants in V3.\r\n* Base variants are not SKUs in V2.\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Create a variant option\r\n> Creating a variant option does not automatically create SKUs or build out variants. You can build out SKUs later using the [Variants](/api-reference/store-management/catalog/product-variants/createvariant) endpoint.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n### Create variant options\r\n\r\nThe following request will create options that will show on the storefront as choices selected by the customer. In a separate request, you could build out SKUs based on these variant option values or a combination of variant option values. You can use a similar request to add new choices to an existing variant.\r\n<!--\r\ntitle: \"Create Size Variant Option\"\r\nsubtitle: \"/POST https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options\"\r\nlineNumbers: true\r\n-->\r\n\r\n**Example create size variant option**\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"product_id\": 134,\r\n  \"name\": \"Size Rectangle\",\r\n  \"display_name\": \"Size\",\r\n  \"type\": \"rectangles\",\r\n  \"option_values\": [\r\n    {\r\n      \"label\": \"S\",\r\n      \"sort_order\": 0,\r\n      \"is_default\": false\r\n    },\r\n    {\r\n      \"label\": \"M\",\r\n      \"sort_order\": 1,\r\n      \"is_default\": true\r\n    },\r\n    {\r\n      \"label\": \"L\",\r\n      \"sort_order\": 2,\r\n      \"is_default\": false\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/product-options/createoption#requestrunner)\r\n\r\n## Variants\r\n\r\n[Variants](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-variants/getvariantbyid) represent an item as it sits on the shelf in the warehouse or a particular saleable product. A product might be a t-shirt, while the variant would be “a small, red t-shirt.” Shoppers select variants on the storefront via product options. In the case where a product is simple, meaning it does not have any options, the product is its own variant - called a base variant. Everything you can buy should be a variant.\r\n\r\n* Options build out variants.\r\n* Variants are usually what you track inventory against.\r\n* Can have their own price, weight, dimensions, image, etc. - or they can inherit these values from the product if you have not specified them.\r\n* Must have a SKU code (unless they are a base variant).\r\n* In non-base variants, variants will relate to a particular combination of variant option values - such as “small” and “red”.\r\n\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--warning\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme: warning -->\r\n\r\n### V2 SKU rules will override variant pricing\r\n> Creating SKU rules via the V2 API or via CSV import will alter or override any variant price or sale price added to a product via the control panel, V3 API, or Price Lists UI.\r\n\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n### Variant examples:\r\n\r\n| Product | Variant option | Variant |\r\n| -- | -- | -- |\r\n| T-Shirt | Blue<br>-<br> Small<br> Medium<br> Large| SM-BLU<br> SM-MED <br> SM-LARG\r\n| Backpack | Black<br>Yellow<br>-<br>2L <br> 3L<br> 8L |BLACK-2L<br>BLACK-3L<br>BLACK 8L<br>-<br>YELLOW-2L<br>YELLOW-3L<br>YELLOW-8L|\r\n\r\n## Creating variants\r\n\r\nYou can create variants in two ways:\r\n* From existing variant options, using [Create a Product Variant](/api-reference/store-management/catalog/product-variants/createvariant) endpoint.\r\n\r\n* By adding variants with options and SKUs, using [Create a Product](/api-reference/store-management/catalog/products/createproduct) endpoint.\r\n\r\n\r\nThe example below will go over using existing variant options to create the variants.\r\n\r\nTo fetch variant information, send a `GET` request to `/v3/catalog/products/{{product_id}}/options`.\r\n\r\n```http\r\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/options\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"data\": [\r\n    {\r\n      \"id\": 193,\r\n      ...\r\n      \"option_values\": [\r\n        {\r\n          \"id\": 163,\r\n          \"label\": \"S\",\r\n          \"sort_order\": 0,\r\n          \"value_data\": null,\r\n          \"is_default\": false\r\n        },\r\n        ...\r\n      ],\r\n      \"config\": []\r\n    },\r\n    {\r\n      \"id\": 194,\r\n      ...\r\n      \"option_values\": [\r\n        {\r\n          \"id\": 166,\r\n          \"label\": \"Blue\",\r\n          \"sort_order\": 1,\r\n          \"value_data\": {\r\n            \"colors\": [\r\n              \"#123C91\"\r\n            ]\r\n          },\r\n          ...\r\n      ],\r\n      \"config\": []\r\n    }\r\n  ],\r\n  \"meta\": {\r\n    ...\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/product-options/getoptions#requestrunner)\r\n\r\nIn the above response, there are two variant options of size and color with three values each.\r\n\r\nTo combine the variant option values into variants and build out SKUs use the following endpoint:\r\n\r\n`https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/variants`\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Note\r\n> * Variants need to be created one at a time using this endpoint.\r\n> * You can create only one variant option at a time; individual variant options will contain an array of multiple values.\r\n> * To use a variant array and create variants in the same call as the base product, use the [/catalog/product](/api-reference/store-management/catalog/products/createproduct) endpoint during product creation.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\nThe `option_values` array combines the options small and blue to create the SKU SMALL-BLUE. The ID in the `option_values` array is the ID from the variant option response `option_values > id`. The `option_id` is the ID of the option.\r\n\r\n\r\n```json\r\n{\r\n  \"id\": 193, //option_id\r\n  \"product_id\": 134,\r\n  \"name\": \"Size1533313432-134\",\r\n  \"display_name\": \"Size\",\r\n  \"type\": \"rectangles\",\r\n  \"sort_order\": 0,\r\n  \"option_values\": [\r\n    {\r\n        \"id\": 163, //id\r\n        \"label\": \"S\",\r\n        \"sort_order\": 0,\r\n        \"value_data\": null,\r\n        \"is_default\": false\r\n    },\r\n    ...\r\n  ]\r\n}\r\n```\r\n\r\n### Create a variant using the product endpoint\r\n\r\nThe following example creates a base product, variant options, and variants in a single call to the [Products](https://developer.bigcommerce.com/api-reference/store-management/catalog/products/createproduct) endpoint. Use this method to create a product and variants in a single call without creating variant options first (option display will default to radio button).\r\n\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n\r\n{\r\n  \"name\": \"BigCommerce Coffee Mug\",\r\n  \"price\": \"10.00\",\r\n  \"categories\": [\r\n    23,\r\n    21\r\n  ],\r\n  \"weight\": 4,\r\n  \"type\": \"physical\",\r\n  \"variants\": [\r\n    {\r\n      \"sku\": \"SKU-BLU\",\r\n      \"option_values\": [\r\n        {\r\n          \"option_display_name\": \"Mug Color\",\r\n          \"label\": \"Blue\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"sku\": \"SKU-GRAY\",\r\n      \"option_values\": [\r\n        {\r\n          \"option_display_name\": \"Mug Color\",\r\n          \"label\": \"Gray\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/products/createproduct#requestrunner)\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Supported types\r\n> Swatch, radio button, rectangle, dropdown, product list, and product list with images.\r\n\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Modifier options\r\n\r\n[Modifier options](/api-reference/store-management/catalog/product-modifiers/getmodifiers) are any choices that the shopper can make to change how the merchant fulfills the product. Examples include:\r\n* A checkbox to add shipping insurance\r\n* Text to be engraved on the product\r\n* A selected color for an unfinished product before it’s shipped\r\n\r\nCritically, the modifier will not change the SKU/variant fulfilled, and you cannot track inventory against combinations of modifier values. Modifiers typically would not change which product is “picked off the shelf” in the warehouse, but they change what happens to that product before sending it to the shopper, or how a merchant can send it.\r\n\r\nModifier options:\r\n* May be required or non-required\r\n* Support all option types\r\n* Cannot be used as part of a variant\r\n\r\nYou can add an adjuster to a modifier option to change things, such as increasing the price, changing the weight, or shipping rules.  You cannot apply adjusters to all modifier types.\r\n\r\n### Modifier options example\r\n\r\n\r\n| Product | Variant option | Variant |Modifier |\r\n| -- | -- | -- | -- |\r\n| T-Shirt | Blue<br>-<br> Small<br> Medium<br> Large| BLU<br> BLU-MED <br> BLU-LARG| Checkbox<br>Donate to Charity|\r\n| Backpack | Black<br>Yellow<br>-<br>2L <br> 3L<br> 8L |BLACK-2L<br>BLACK-3L<br>BLACK 8L<br>-<br>YELLOW-2L<br>YELLOW-3L<br>YELLOW-8L| Text Field<br> Add Embroidery|\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Modifiers that support adjusters\r\n> Swatch, radio button, rectangle list, drop-down, product list, and product list with images.\r\n\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n### Add a modifier with price adjuster to an existing product\r\n\r\nThe following example shows how to add a modifier and a checkbox with a price adjuster to increase the product's price by five dollars.\r\n\r\nCreating a checkbox with an adjuster requires two separate calls: one to create the checkbox and another one to add the adjuster. You can define adjusters within the `option_values` array, but `option_values` are not allowed in the request to create a checkbox modifier because creating a checkbox automatically generates two mandatory option values: `Yes` and `No`. Once you have created the checkbox and its option values, you can update the modifier to add an adjuster.\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Modifiers that require a second step to add an adjuster\r\n> Swatch, radio button, drop-down, rectangle list, product list, product list with images, and checkbox.\r\n\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\nTo [create a modifier](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-modifiers/createmodifier), send a `POST` request to `/v3/catalog/products/{{product_id}}/modifiers`.\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/modifiers\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"type\": \"checkbox\",\r\n  \"required\": false,\r\n  \"config\": {\r\n    \"default_value\": \"Yes\",\r\n    \"checked_by_default\": false,\r\n    \"checkbox_label\": \"Check for Donation\"\r\n  },\r\n  \"display_name\": \"Add a $5 Donation\"\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/product-modifiers/createmodifier#requestrunner)\r\n\r\n\r\n**Response:**\r\n\r\n```json\r\n{\r\n  \"data\": [\r\n    {\r\n      \"id\": 160,\r\n      \"product_id\": 131,\r\n      \"name\": \"Add-a-$5-Donation1535039590-191\",\r\n      \"display_name\": \"Add a $5 Donation\",\r\n      \"type\": \"checkbox\",\r\n      \"required\": false,\r\n      \"config\": {\r\n        \"checkbox_label\": \"Check for Donation\",\r\n        \"checked_by_default\": false\r\n      },\r\n      \"option_values\": [\r\n        {\r\n          \"id\": 149,\r\n          \"option_id\": 160,\r\n          \"label\": \"Yes\",\r\n          \"sort_order\": 0,\r\n          \"value_data\": {\r\n            \"checked_value\": true\r\n          },\r\n          \"is_default\": false,\r\n          \"adjusters\": {...},\r\n        {\r\n          \"id\": 150,\r\n          \"option_id\": 160,\r\n          \"label\": \"No\",\r\n          \"sort_order\": 1,\r\n          \"value_data\": {\r\n            \"checked_value\": false\r\n          },\r\n          \"is_default\": true,\r\n          \"adjusters\": {...}\r\n      ]\r\n    }\r\n  ],\r\n  \"meta\": {...}\r\n}\r\n```\r\n\r\nSince this is a checkbox with two states, you create two option values. The default `adjuster_value` is null.\r\n\r\nTo [update the modifier value](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-modifier-values/updatemodifiervalue), send a `PUT` request to `/v3/catalog/products/{{product_id}}/modifiers/{{modifier_id}}/values/{value_id}`.\r\n\r\n```http\r\nPUT https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/products/{{product_id}}/modifiers/{{modifier_id}}/values/{value_id}\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"is_default\": false,\r\n  \"adjusters\": {\r\n    \"price\": {\r\n      \"adjuster\": \"relative\",\r\n      \"adjuster_value\": 5\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/product-modifier-values/updatemodifiervalue#requestrunner)\r\n\r\n### Troubleshooting: 422 Errors\r\n\r\n```json\r\n{\r\n    \"status\": 422,\r\n    \"title\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\",\r\n    \"type\": \"https://developer.bigcommerce.com/api#api-status-codes\",\r\n    \"errors\": {\r\n        \"product_id\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\"\r\n    }\r\n}\r\n```\r\n\r\nTo fix this error:\r\n\r\n* Modify the products using the V2 API.\r\n* Remove the option set using the V2 API or the control panel, then remake the variants and modifiers using V3.\r\n\r\n## Complex rules\r\n\r\n[Complex rules](/api-reference/store-management/catalog/product-complex-rules/getcomplexrules) allow merchants to set up conditions and actions based on shopper option selections on the storefront. You can use them to vary the following based on the shopper's option selections:\r\n* Price\r\n* Weight\r\n* Image\r\n* Purchasability\r\n\r\nAdjustments made by complex rules are displayed to shoppers in real-time on the storefront.\r\n\r\nFor most merchant use cases, **best practice** will be to either assign values (such as a price) directly to a variant or use adjusters on the modifier option itself. However, complex rules exist for rare cases where a rule condition is too complex to express in those forms easily.\r\n\r\nUse complex rules when an adjustment should be triggered by:\r\n* The selection of values across multiple modifier options.\r\n* The combination of a particular variant/SKU and a modifier option value.\r\n\r\n### Complex rules example\r\n\r\n| Product | Variant option | Variant |Modifier | Complex rule |\r\n| -- | -- | -- | -- | -- |\r\n| T-Shirt | Blue<br>-<br> Small<br> Medium<br> Large| SM-BLU<br> SM-MED <br> SM-LARG| Checkbox<br>Donate to Charity| Checkbox<br> Donate to Charity.<br> Add $5\r\n| Backpack | Black<br>Yellow<br>-<br>2L <br> 3L<br> 8L |BLACK-2L<br>BLACK-3L<br>BLACK 8L<br>-<br>YELLOW-2L<br>YELLOW-3L<br>YELLOW-8L| Text Field<br> Add Embroidery| N/A\r\n\r\n<br>\r\n\r\n### Creating complex rules based on modifiers\r\n\r\nComplex rules must have a combination of two or more modifiers, such as two checkboxes. The following example will add $10 to the product price when you check both boxes.\r\n\r\n```http\r\nPUT https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/complex-rules\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"product_id\": 1200,\r\n  \"enabled\": true,\r\n  \"price_adjuster\": {\r\n    \"adjuster_value\": 10\r\n  },\r\n  \"conditions\": [\r\n    {\r\n      \"modifier_id\": 506,\r\n      \"modifier_value_id\": 852\r\n    },\r\n    {\r\n      \"modifier_id\": 507,\r\n      \"modifier_value_id\": 854\r\n    }\r\n  ]\r\n}\r\n```\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/product-complex-rules/updatecomplexrule#requestrunner)\r\n\r\n### Troubleshooting: 422 Errors\r\n\r\nComplex rules must consist of multiple conditions that trigger the rule adjustment. If multiple conditions are not specified, the request will return a 422 error.\r\n\r\n```json\r\n{\r\n    \"status\": 422,\r\n    \"title\": \"The rule must contain multiple modifier conditions with unique modifier ids or a variant condition and modifier condition\",\r\n    \"type\": \"https://developer.bigcommerce.com/api#api-status-codes\"\r\n}\r\n```\r\n\r\n## Creating brands\r\n\r\nTo create a [Brand](/api-reference/store-management/catalog/brands/getbrands), send a `POST` request to `/v3/catalog/brands`.\r\n\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/brands\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"name\": \"BigCommerce\",\r\n  \"page_title\": \"BigCommerce\",\r\n  \"meta_keywords\": [\r\n    \"ecommerce\",\r\n    \"best in class\",\r\n    \"grow your business\"\r\n  ],\r\n  \"image_url\": \"{{image_url}}\"\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/brands/createbrand#requestrunner)\r\n\r\nFor general information on brands and their use cases, see [Managing Brands](https://support.bigcommerce.com/s/article/Managing-Brands).\r\n\r\n## Categories\r\n\r\n[Categories](/api-reference/store-management/catalog/category/getcategories) are a hierarchy of products available on the store, presented in a tree structure. A store's category structure determines the primary menu structure of most storefront themes directly tied to it.\r\n\r\nBigCommerce's V3 REST API does not require products to be associated with a category during creation. You can add new products to a catalog without a category, which can be assigned later if desired. A store's category can contain multiple products or no products at all and still be valid. \r\n\r\nYou can associate products with multiple categories. A product associated with categories does not currently have any priority or weighted order (there's no “primary category”). The absence of priority or weighted order makes it difficult to integrate with some external systems that might wish to use a product's categories to map to a category structure.\r\n\r\n```http\r\nPOST https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/categories\r\n\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n\r\n{\r\n  \"parent_id\": 18,\r\n  \"name\": \"Shoes\",\r\n  \"description\": \"Shoes Available for purchase\",\r\n  \"sort_order\": 1,\r\n  \"page_title\": \"Shoes\",\r\n  \"is_visible\": true\r\n}\r\n```\r\n\r\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/category/createcategory#requestrunner)\r\n\r\n### Category tree\r\n\r\n[Category Tree](/api-reference/store-management/catalog/category/getcategorytree) returns a simple view of the parent > child relationship of all categories in the store. You can use this endpoint to fetch the categories if building out a custom navigation for a store.\r\n\r\n```http\r\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/catalog/categories/tree\r\nAccept: application/json\r\nContent-Type: application/json\r\nX-Auth-Token: {{ACCESS_TOKEN}}\r\n```\r\n\r\n**Response:**:\r\n\r\n```json\r\n{\r\n  \"data\": [\r\n    {\r\n      \"id\": 25,\r\n      \"parent_id\": 0,\r\n      \"name\": \"Towels\",\r\n      \"is_visible\": true,\r\n      \"url\": \"/towels/\",\r\n      \"children\": [\r\n        {\r\n          \"id\": 26,\r\n          \"parent_id\": 25,\r\n          \"name\": \"Bath Towels\",\r\n          \"is_visible\": true,\r\n          \"url\": \"/towels/bath-towels/\",\r\n          \"children\": [\r\n            {\r\n              ...\r\n              \"children\": [\r\n                ...\r\n                ]\r\n            },\r\n            ...\r\n          ]\r\n        },\r\n        ..\r\n      ]\r\n    },\r\n    ...\r\n  ],\r\n  \"meta\": {...}\r\n}\r\n```\r\n\r\n## Product Sort Order\r\n\r\n[Product Sort Order](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-sort-order) allows you to manage the sort order of products displayed on any given category page. Products assigned to multiple storefront categories can have different sort order values per category.\r\n\r\n### Product sorting on a storefront \r\n\r\nThe Catalog API supports two manually managed methods of product sorting: on a category level and a product level. If a user combines both sorting methods on a storefront, products with sort order values on a category level take priority. If there is no sort order value on a category level, the Catalog API sorts products by values on a product level.\r\n\r\nProduct sorting methods:\r\n\r\n1. Manually specified sort order on a category level.\r\n2. Manually specified sort order on a product level. `0` by default. \r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--info\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme:  -->\r\n\r\n### Note\r\n> Products with the same sort order value either on a category or a product level are sorted by `product id` as a second criterion.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Related resources\r\n\r\n### Endpoints\r\n* [Catalog API](/api-reference/store-management/catalog)\r\n\r\n### Webhooks\r\n* [Products](https://developer.bigcommerce.com/api-docs/store-management/webhooks/webhook-events#products)\r\n* [Categories](https://developer.bigcommerce.com/api-docs/store-management/webhooks/webhook-events#category)\r\n* [SKU](https://developer.bigcommerce.com/api-docs/store-management/webhooks/webhook-events#sku)\r\n"}],"children":[]}}}}
