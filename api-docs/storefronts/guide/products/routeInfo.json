{"path":"api-docs/storefronts/guide/products","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Building Headless Storefronts","to":"/api-docs/storefronts"},{"content":"Guide","to":"/api-docs/storefronts/guide"},{"content":"Working with Products","to":"/api-docs/storefronts/guide/products"}],"page":{"meta":{"title":"Working with Products - Guide - Building Headless Storefronts - API Docs","url":"/api-docs/storefronts/guide/products","description":"Working with Products\n\n\n\nOn this page\n\nRetrieving product data\n\nManaging products\n\nNext steps\n\nResources\n\n\n\nThis section demonstrates how to use BigComm..."},"title":"Working with Products","parsedPath":["pages","/api-docs","data","children",6,"data","children",0,"data","children",2],"rootPagePath":"/api-docs","path":"/api-docs/storefronts/guide/products","isSubpage":true,"route":{"path":"/products"},"data":{"blocks":[{"type":"text","data":"# Working with Products\n\n<div class=\"otp\" id=\"no-index\">\n\n### On this page\n- [Retrieving product data](#retrieving-product-data)\n- [Managing products](#managing-products)\n- [Next steps](#next-steps)\n- [Resources](#resources)\n\n</div>\n\nThis section demonstrates how to use BigCommerce's GraphQL Storefront API and REST Products API to query and manage product data for headless storefronts.\n\n## Retrieving product data\n\nBigCommerce's [GraphQL Storefront API](https://developer.bigcommerce.com/api-reference/graphql/graphql) makes it possible to query storefront data from a remote site. By leveraging the power of GraphQL, you can access product information for any product from any page.\n\nThe following example demonstrates how to fetch product data using the GraphQL Storefront API. It relies on the [GraphQL Cursor Connections Specification model](https://relay.dev/graphql/connections.htm) to handle pagination.\n\n**Product Listing Page query example**\n\n```graphql\nfunction getProductInfo(params) {\n    const storeUrl = new URL(params.store_url);\n\n    // Use the store's canonical URL which should always resolve\n    const graphQLUrl = `${storeUrl.origin}/graphql`;\n\n    // Set up GraphQL query\n    const graphQLQuery = `\n        query productListing {\n            site {\n                products {\n                    pageInfo {\n                        startCursor\n                        endCursor\n                        }\n                    edges {\n                        cursor\n                        node {\n                            id\n                            entityId\n                            name\n                            sku\n                            description\n                            prices {\n                                price {\n                                    value\n                                    currencyCode\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }`\n\n    // Fetch data from the GraphQL Storefront API\n    return fetch(graphQLUrl, {\n        method: 'POST',\n        credentials: 'include',\n        mode: 'cors',\n        headers: { \n            'Content-Type': 'application/json', \n            'Authorization': `Bearer ${params.token}`},\n            body: JSON.stringify({ query: graphQLQuery}),\n        })\n        .then(res => res.json())\n        .then(res => res.data);\n    }\n\n    // Set up default params\n    let params = {\n        store_url: null,\n        token: null\n    };\n```\nFollowing the same API fetching logic, you can retrieve data for a single product.\n\n**Product Details Page query example**\n\n```graphql\nquery SingleProduct {\n  site {\n    product (entityId: ${params.id}) {\n      id\n      entityId\n      name\n      sku\n      description\n      prices {\n        price {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n}\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n> ### Note\n> We recommend using the GraphQL Storefront API to query the product data. It lets you specify the information needed from the server and retrieve multiple resources in a single call. For example, using the GraphQL Storefront API, you can fetch product pricing, options, and variations in a single request, improving performance and minimizing the need for subsequent API calls.\n</div>\n</div>\n</div>\n\n## Managing products\n\nThe GraphQL Storefront API provides read-only data and cannot be used to manipulate products at this time. You will need to use BigCommerce's REST [Products API](https://developer.bigcommerce.com/api-reference/store-management/catalog/products/) to manage products data. \n\nTo update products in batches, send a `PUT` request to the [Update Products (Batch)](https://developer.bigcommerce.com/api-reference/store-management/catalog/products/updateproducts) endpoint. \n\n```http\nPUT https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n[\n  {\n    \"id\": 77,\n    \"name\": \"Fog Linen Chambray Towel - Beige Stripe\",\n    \"inventory_level\": 11,\n    \"price\": 55.97\n  },\n  {\n    \"id\": 80,\n    \"name\": \"Orbit Terrarium - Large\",\n    \"inventory_level\": 15,\n    \"price\": 100.99\n  }\n]\n```\n\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/store-management/catalog/products/updateproducts#requestrunner)\n\nTo update a single product, send a `PUT` request to the [Update a Product](https://developer.bigcommerce.com/api-reference/store-management/catalog/products/updateproduct) endpoint.\n\n```http\nPUT https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}\nAccept: application/json\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n\n{\n    \"name\": \"Fog Linen Chambray Towel - Beige Stripe\",\n    \"inventory_level\": 10,\n    \"price\": 55.97\n}\n```\n\n[![Open in Request Runner](https://storage.googleapis.com/bigcommerce-production-dev-center/images/Open-Request-Runner.svg)](https://developer.bigcommerce.com/api-reference/store-management/catalog/products/updateproduct#requestrunner)\n\n### Cache the catalog\n\nIt is best practice to cache product details in a database to improve performance and increase operational efficiency. Caching product information will allow you to implement search functionality and control the information displayed to the customers.\n \n## Next steps\n\n- [Learn how to create a cart](https://developer.bigcommerce.com/api-docs/storefronts/guide/carts)\n\n## Resources\n\n- [Catalog API Overview](https://developer.bigcommerce.com/api-docs/store-management/catalog/catalog-overview)"}],"children":[]}}}}
