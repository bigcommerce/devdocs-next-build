{"path":"api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"Z1Jm3fi","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Building Headless Storefronts","to":"/api-docs/storefronts"},{"content":"Embedded Checkout","to":"/api-docs/storefronts/embedded-checkout"},{"content":"Embedded Checkout Tutorial","to":"/api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial"}],"page":{"meta":{"title":"Embedded Checkout Tutorial - Embedded Checkout - Building Headless Storefronts - API Docs","url":"/api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial","description":"Embedded Checkout\n\n\n\nOn this page\n\nCreating a channel\n\nCreating a site\n\nCreating a cart\n\nEmbedding the checkout\n\nFAQ\n\nRelated resources\n\n\n\nEmbedded Chec..."},"title":"Embedded Checkout Tutorial","parsedPath":["pages","/api-docs","data","children",6,"data","children",1,"data","children",1],"rootPagePath":"/api-docs","path":"/api-docs/storefronts/embedded-checkout/embedded-checkout-tutorial","isSubpage":true,"route":{"path":"/embedded-checkout-tutorial"},"data":{"blocks":[{"type":"text","data":"# Embedded Checkout\n\n<div class=\"otp\" id=\"no-index\">\n\n### On this page\n- [Creating a channel](#creating-a-channel)\n- [Creating a site](#creating-a-site)\n- [Creating a cart](#creating-a-cart)\n- [Embedding the checkout](#embedding-the-checkout)\n- [FAQ](#faq)\n- [Related resources](#related-resources)\n\n</div>\n\nEmbedded Checkout lets you place BigCommerceâ€™s Optimized One-Page checkout onto an external site. This tutorial will walk you through the sequence of API calls your application should make to create a working Embedded Checkout.\n\nThis article assumes you have familiarity with the following concepts:\n\n* Creating and managing a server-side application\n* Making and receiving API calls from within your app\n* Using your application to make changes to a front end\n\n### Prerequisites\n\n* Store API credentials with the following permissions.\n\t- **Carts:** `Modify`\n\t- **Channel Settings:** `Modify`\n\t- **Sites & Routes:** `Modify`\n\t- **Products:** `Read Only`\n\nFor more information, see [OAuth Scopes](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).\n\n* The [BigCommerce JS Checkout SDK](https://github.com/bigcommerce/checkout-sdk-js) must be accessible in the browser.\n\n## Creating a channel\n\nTo allow an external website to serve the BigCommerce checkout, create a new channel by sending a `POST` request to the `/channels` endpoint.\n\n**`POST`** `https://api.bigcommerce.com/stores/{{store_hash}}/v3/channels`\n\n**Create a Channel POST request**\n\n```json\n{\n    \"type\": \"storefront\",\n    \"platform\": \"custom\",\n    \"name\": \"https://{your-site}.com\"\n}\n```\n\nThe response will contain an `id` which we will use as the `channel_id` in future requests.\n\n**Create Channel response**\n\n```json\n\n{\n    \"data\": {\n        \"id\": 20266,\n        \"name\": \"https://www.{your-site}.com\",\n        \"platform\": \"custom\",\n        \"type\": \"storefront\",\n        \"date_created\": \"2019-09-18T22:28:36Z\",\n        \"date_modified\": \"2019-09-18T22:28:36Z\",\n        \"external_id\": \"\",\n        \"is_enabled\": true\n    },\n    \"meta\": {}\n}\n```\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\n<!-- theme:  -->\n> Channels created via API are visible in the BigCommerce store's Control Panel in **Products** > **Listed On**. The Orders section will now also include a filter for your channel.\n\n</div>\n</div>\n</div>\n\n\n## Creating a site\n\nNext, create a site for the channel by sending a `POST` request to the `/channels/id/site` endpoint.\n\n**`POST`** `https://api.bigcommerce.com/stores/{{store_hash}}/v3/channels/{{channel_id}}/site`\n\n**Create Site POST**\n\n```js\n{\n    \"channel_id\": 20266,\n    \"url\": \"https://www.{your-site}.com\"\n}\n```\n\nThis returns `id` which you will use as the `site_id` in future requests. The `url` value is the base path for all other routes you define for the site.\n\n**Create Site response**\n\n```js\n{\n    {\n    \"data\": {\n        \"id\": 6,\n        \"url\": \"https://www.{your-site}.com\",\n        \"channel_id\": 20266,\n        \"created_at\": \"2019-09-19T17:08:44Z\",\n        \"updated_at\": \"2019-09-19T17:08:44Z\"\n    },\n    \"meta\": {}\n    }\n}\n```\n\n## Creating a cart\n\nTo proceed to checkout, we'll need an active cart. To create one, send a `POST` request to the [Server-to-Server Cart API's](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-cart-api)  `/cart` endpoint.\n\n**`POST`**  `https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts`\n\n**Create Cart POST request**\n\n```json\n{\n  \"channel_id\": 20266,\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 80,\n      \"variant_id\": 64\n    }\n  ]\n}\n```\n\nIf you are creating a cart for a specific customer, pass in the `customer_id` in the request.\n\n```json\n{\n  \"customer_id\": 42,\n  \"line_items\": [\n    {\n      \"quantity\": 5,\n      \"product_id\": 191\n    }\n  ]\n}\n```\n\nContained in the response is an `id` which we'll use as the `cart_id` in the next request:\n\n**Create Cart response**\n\n```json\n{\n    \"data\": {\n        \"id\": \"33608b81-ba34-4ff2-8bab-2771aeab3f73\",\n    ...\n}\n```\nNext, generate cart redirect URLs by sending a `POST` request to `/carts/{{cart_id}}/redirect_urls`.\n\n**`POST`** `https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts/{{cart_id}}/redirect_urls`\n\n**Generate Redirect URLs response**\n\n```json\n{\n  \"cart_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?action=load&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n  \"checkout_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n  \"embedded_checkout_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\"\n}\n```\n\n### Redirecting a logged-in customer to embedded checkout\n\nFor some use cases, you may want your customer to log in before they can begin the checkout process.\n\nCustomers can log in using the [Customer Login API](https://developer.bigcommerce.com/api-docs/customers/customer-login-api#logging-in-a-customer).\n\nYou will first need to use JSON Web Token Standard to create a new token. Use a [JWT library](https://jwt.io/#libraries-io) to accomplish this. For more information, see [Create JWT Using the Debugger Tool](https://developer.bigcommerce.com/api-docs/customers/customer-login-api#create-jwt-using-the-debugger-tool).\n\nNext, include the `embedded_checkout_url` as part of the request payload you send to BigCommerce.\n\n**Customer Login Request**\n\n\n```json\n{\n\"iss\": {client_id},\n\"iat\": 1535393113,\n\"jti\": {uuid},\n\"operation\": \"customer_login\",\n\"store_hash\": {store_hash},\n\"customer_id\": 2\n\"redirect_to\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n\"request_ip\": \"111.222.333.444\"\n}\n```\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\nThe `request_ip` field is optional.\n</div>\n</div>\n</div>\n\n## Embedding the checkout\n\nUse the `embedded_checkout_url` that is returned from generating redirect URLs and assemble a JSON object. It will be used by the Checkout JS SDK to determine how to render the checkout.\n\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n\t\nWhen the shopper is logged in, use the https://{{store-url}}/login/token/{{token}} URL as the `url` option for `embedCheckout`. For unauthenticated shoppers, use the `embedded_checkout_url` as the `url` option instead.\n\t\n</div>\n</div>\n</div>\n\n**JSON object**\n```json\n{\n\"containerId\": \"foo-bar-checkout\",\n\"url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\"\n    }\n```\n\nPass the object to the `embedCheckout` method of the Checkout SDK.\n\n\n**embedCheckout method**\n\n```js\nembedCheckout({\n\"containerId\": \"foo-bar-checkout\",\n\"url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\"\n    });\n```\n\nThis will render the checkout to an HTML element with the `id` you chose.\n\n**HTML element**\n```html\n<div id=\"foo-bar-checkout\"></div>\n```\n\nRead more about the [JSON object](https://github.com/bigcommerce/checkout-sdk-js/blob/master/docs/README.md#embedcheckout) and its possible corresponding [rendering options](https://github.com/bigcommerce/checkout-sdk-js/blob/master/docs/interfaces/embeddedcheckoutoptions.md).\n\n## FAQ\n\n### How can I work with Embedded Checkout locally?\n\nOne option for working locally is to install an SSL on your local machine, and then send `https://localhost.com` as the Channel site. Use the default port 443 to be able to preview your site locally.\n\nIf your channel site doesn't match the URL from which you're making a request to BigCommerce, you will get a security error in the browser and the checkout will not load. Additionally, if requests to your BigCommerce store aren't served over HTTPS, you will also see an error.\n\n### Are hosted payment gateways supported with Embedded Checkout?\nAt this time, you cannot embed a checkout using a hosted payment gateway. See [Available Payment Gateways](https://support.bigcommerce.com/s/article/Available-Payment-Gateways#all-available) to determine which type of gateway you're using.\n\n### How do I resolve Embedded Checkout 403 \"Cannot start checkout session with an empty cart\" Errors?\n\nFor Embedded Checkout to work correctly for shoppers using a browser with restricted privacy settings (like Apple's Safari), your checkout page must be served from the same domain as your BigCommerce storefront. For example, if your headless storefront is `www.mystore.com`, then your BigCommerce store's domain should be `checkout.mystore.com`. For more information on making Embedded Checkout on a headless WordPress storefront compatible with Safari, see [BigCommerce for WordPress](https://support.bigcommerce.com/s/article/BigCommerce-for-WordPress-Checkout#safari).\n\n### How do I make sure that authenticated shoppers who sign out from the checkout page are also signed out of the headless storefront?\n\nTo ensure you log shoppers off from the checkout page and the headless storefront, developers should pass an `onSignOut` option to `embedCheckout` to handle sign out events from the checkout page. \n\n## Related resources\n\n### Endpoints\n- [Channels API reference](https://developer.bigcommerce.com/api-reference/store-management/channels/)\n"}],"children":[]}}}}
