{"path":"stencil-docs/javascript-and-event-hooks/remote-api-tutorial","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"23J4Lj","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"Stencil Docs","to":"/stencil-docs"},{"content":"JavaScript","to":"/stencil-docs/javascript-and-event-hooks"},{"content":"Remote API Tutorial","to":"/stencil-docs/javascript-and-event-hooks/remote-api-tutorial"}],"page":{"meta":{"title":"Remote API Tutorial - JavaScript - Stencil Docs","url":"/stencil-docs/javascript-and-event-hooks/remote-api-tutorial","description":"Remote API Tutorial\n\n\n\nOn This Page\n\nRemote API Example\n\n\n\nRemote API Example\n\nClient-side JavaScript can access event hooks directly, without using Han..."},"title":"Remote API Tutorial","parsedPath":["pages","/stencil-docs","data","children",5,"data","children",4],"rootPagePath":"/stencil-docs","path":"/stencil-docs/javascript-and-event-hooks/remote-api-tutorial","isSubpage":true,"route":{"path":"/remote-api-tutorial"},"data":{"blocks":[{"type":"text","data":"# Remote API Tutorial\r\n\r\n<div class=\"otp\" id=\"no-index\">\r\n\r\n### On This Page\r\n- [Remote API Example](#remote-api-example)\r\n\r\n</div>\r\n\r\n## Remote API Example\r\n\r\nClient-side JavaScript can access event hooks directly, without using Handlebars statements. By setting up listeners for these events, you can exercise granular control over your storefrontâ€™s user interface. For example, you can pop up custom windows when certain events occur.\r\n\r\nBelow is an example implemented within a Stencil theme. This code adds an item to the shopping cart, and displays the result in a custom modal dialog rather than a cart page.\r\n\r\nThis particular example uses certain conventions of ES6 JavaScript (also known as ECMAScript 6 or ECMAScript 2015).\r\n\r\nHere is the signature of the cart.itemAdd function used below, with parameters for product ID, quantity, and options:\r\n\r\n`itemAdd(FormData, callback)`\r\n\r\nHere is the signature of the cart.getContent function used further down:\r\n\r\n`getContent(options, callback)`\r\n\r\nThis first complete code snippet calls cart.itemAdd, catches any errors, and displays the cart contents in a modal dialog:\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```js\r\n // Add item to cart\r\n        utils.api.cart.itemAdd(new FormData(form), (err, response) => {\r\n            const errorMessage = err || response.data.error;\r\n\r\n            $addToCartBtn\r\n                .val(originalBtnVal)\r\n                .prop('disabled', false);\r\n\r\n            this.$overlay.hide();\r\n\r\n            // Guard statement\r\n            if (errorMessage) {\r\n                // Strip the HTML from the error message\r\n                const tmp = document.createElement('DIV');\r\n                tmp.innerHTML = errorMessage;\r\n\r\n                return alert(tmp.textContent || tmp.innerText);\r\n            }\r\n\r\n            // Open preview modal and update content\r\n            if (this.previewModal) {\r\n                this.previewModal.open();\r\n\r\n                this.updateCartContent(this.previewModal, response.data.cart_item.hash);\r\n            } else {\r\n                this.$overlay.show();\r\n                // if no modal, redirect to the cart page\r\n                this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);\r\n            }\r\n        });\r\n```\r\n\r\nThis final code snippet calls `cart.getContent` to fetch the cart contents, then display it in a preview format, which is specified by a template option with a value of `cart/preview`:\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```js\r\n /**\r\n     * Get cart contents\r\n     *\r\n     * @param {String} cartItemHash\r\n     * @param {Function} onComplete\r\n     */\r\n    getCartContent(cartItemHash, onComplete) {\r\n        const options = {\r\n            template: 'cart/preview',\r\n            params: {\r\n                suggest: cartItemHash,\r\n            },\r\n            config: {\r\n                cart: {\r\n                    suggestions: {\r\n                        limit: 4,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        utils.api.cart.getContent(options, onComplete);\r\n    }\r\n```\r\n"}],"children":[]}}}}
