{"path":"stencil-docs/reference-docs/front-matter-reference","templateID":0,"sharedPropsHashes":{"nav":"Z2k7O5R","sidebarTree":"23J4Lj","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"Stencil Docs","to":"/stencil-docs"},{"content":"Reference Docs","to":"/stencil-docs/reference-docs"},{"content":"Front Matter Reference","to":"/stencil-docs/reference-docs/front-matter-reference"}],"page":{"meta":{"title":"Front Matter Reference - Reference Docs - Stencil Docs","url":"/stencil-docs/reference-docs/front-matter-reference","description":"Front Matter Reference\n\n\n\nOn this page\n\nSupported templates\n\nGlobal attributes\n\nCategory attributes\n\nBlog attributes\n\nProduct attributes\n\nBrand attribut..."},"title":"Front Matter Reference","parsedPath":["pages","/stencil-docs","data","children",10,"data","children",5],"rootPagePath":"/stencil-docs","path":"/stencil-docs/reference-docs/front-matter-reference","isSubpage":true,"route":{"path":"/front-matter-reference"},"data":{"blocks":[{"type":"text","data":"# Front Matter Reference\r\n\r\n<div class=\"otp\" id=\"no-index\">\r\n\r\n### On this page\r\n- [Supported templates](#supported-templates)\r\n- [Global attributes](#global-attributes)\r\n- [Category attributes](#category-attributes)\r\n- [Blog attributes](#blog-attributes)\r\n- [Product attributes](#product-attributes)\r\n- [Brand attributes](#brand-attributes)\r\n- [Brand list attributes](#brand-list-attributes)\r\n- [Search attributes](#search-attributes)\r\n- [GraphQL attributes](#graphql-attributes)\r\n  \r\n</div>\r\n\r\nFront matter defines which store resources are available to be rendered within a Stencil template. Front matter is declared at the top of each template and uses [YAML](https://yaml.org/) syntax. For more information, see [Declaring Front Matter Objects](https://developer.bigcommerce.com/stencil-docs/storefront-customization/using-front-matter#declaring-front-matter-objects).\r\n\r\n## Supported templates\r\nYou can use YAML front matter for templates in the `templates/pages/` directory. Injecting objects in the front matter of `templates/pages/page.html` will make the objects available to custom templates.\r\n\r\n\r\nYou cannot use front matter for templates in the following directories:\r\n* `templates/components/`\r\n* `templates/layout/`\r\n* `templates/pages/custom/`\r\n\r\n\r\n## Global attributes\r\n​Global attributes are available on all pages.\r\n​\r\n```yaml\r\ncustomer:                         \r\n  returns: true                     # show product return requests for this customer\r\n  wishlists:     \r\n    limit: 10                       # limit the number of wishlists to 10\r\n  orders:\r\n    limit: 10                       # limit the number of orders displayed to 10\r\n  recently_viewed_products: true    # display recently viewed products\r\n```\r\n​\r\n|  Property | Description |\r\n| --- | --- |\r\n|  `customer` | Customer attributes are always included and are available when an active shopper logs in. |\r\n|  `returns` | Boolean indicating whether to retrieve product return requests for this customer. No filtering available.true: Retrieve requests. null or false: Do not retrieve requests. |\r\n|  `wishlists` | If `null`, wishlists are displayed. If `limit` is not specified, it retrieves an unlimited number of wishlists. |\r\n|  `orders` | If `null`, no orders are displayed. Displays complete and incomplete orders. If `limit` is not specified, it displays 20 orders. |\r\n|  `recently_viewed_products` | Boolean indicating whether to display recently viewed products. No filtering available. |\r\n|  `limit` | The maximum number of the entity to display. |\r\n\r\n```yaml\r\nproducts:\r\n  featured:\r\n    limit: 10   #limits the number of featured products to 5\r\n  new:\r\n    limit: 10   #limits the number of new products to 5\r\n  top_sellers: \r\n    limit: 10   # limits the number of top sellers to 5\r\n```    \r\n\r\n|  Property | Description |\r\n| --- | --- |\r\n| `products` | When filtering/limiting, products' default sorting is by order id, from lowest to highest.|\r\n| `featured` | null: No featured products displayed. If not set, defaults to 4 products.|\r\n|`new`| null: No new products displayed. The maximum allowable value is 25. If not defined, defaults to 8 products.|\r\n|`top_sellers`| null: No top-selling products displayed. If not defined, defaults to all top sellers.|\r\n\r\n```yaml \r\ncarousel: true    # displays carousel on the storefront unless set to null\r\n```\r\n|  Property | Description |\r\n| --- | --- |\r\n|`carousel`|Boolean indicating whether to display a carousel on a storefront. No filtering available.|\r\n\r\n```yaml\r\nblog:\t\r\n  recent_posts:\r\n    limit: 5    # limits recent blog posts to 5\r\n  summary: 100  # displays 100 character summary of blog post\r\n```\r\n\r\n|  Property | Description |\r\n| --- | --- |\r\n|`blog`| Default sorting is by published_date, from most recent to earliest. This sorting does not work on the blog page. See [Blog Attributes](https://developer.bigcommerce.com/stencil-docs/reference-docs/front-matter-reference#blog-attributes).|\r\n|`recent_posts`| null: No recent blog posts displayed. If not defined, defaults to the maximum of 20 blog posts.|\r\n|`summary`|Sets the number of characters to display in each blog post summary. If not defined, it displays 100 characters.|\r\n\r\n```yaml \r\ncart: true    # show cart data\r\n```\r\n|  Property | Description |\r\n| --- | --- |\r\n|`cart`|Boolean indicating whether to retrieve cart data. false: Do not return cart data.|\r\n\r\n```yaml\r\ncategories: true      # displays category tree\r\n  description: true   # displays category description\r\n```\r\n\r\n|  Property | Description |\r\n| --- | --- |\r\n|`categories`|Boolean indicating whether to retrieve the category tree during an AJAX request. false: Do not retrieve the category tree.|\r\n|`description`|Boolean indicating whether to retrieve category descriptions dynamically from the database. Set to true for themes that must display category descriptions when pages render.|\r\n\r\n```yaml\r\nshop_by_brand: true   # displays brand list\r\n  limit: 10           # limits brands to 10 \r\n```\r\n\r\n|Property|Description|\r\n|---|---|\r\n|`shop_by_brand`|Typically used in a footer or sidebar. null: Do not display this brand list. If not defined, it returns 10 brands, ordered by the number of products per brand.|\r\n\r\n## Category attributes\r\nCategory attributes are available in the context of a category.\r\n\r\n```yaml\r\ncategory:\t\r\n  shop_by_price: true   # displays shop by price controls\r\n  products: 10          # displays 10 products per page for this category \r\n    limit:  10          # limits products per page for this category to 10\r\n```\r\n\r\n|Property|Description|\r\n|---|---|\r\n|`shop_by_price`|Boolean indicating whether to display Shop-by-Price controls.|\r\n|`products`|Defines the number of products displayed per page for this category. The range of possible values is 1–100 products.|\r\n\r\n## Blog attributes\r\nBlog attributes are available in the context of a blog.\r\n\r\n```yaml\r\nblog: \r\n  posts:\r\n    limit: 5        # limits number of blog posts to 10\r\n    pages: 5        # displays 5 pages in pagination links\r\n    summary: 250    # displays 250 character summary of blog post\r\n```\r\n\r\n|Property|Description|\r\n|---|---|\r\n|`posts`|Default sorting is by `published_date`, from most recent to earliest.|\r\n|`limit`|null: No blog posts displayed. The maximum is 20 blog posts per page.|\r\n|`pages`|null: No pagination. If not defined, defaults to five pages.|\r\n|`summary`|<number> sets the number of characters to display in each blog-post summary. If not defined, it displays 250 characters.|\r\n\r\n## Product attributes\r\nProduct attributes are available in the context of a product.\r\n\r\n```yaml\r\nproduct:\r\n  videos:\r\n    limit: 5           # limits videos to 5\r\n  images:\r\n    limit: 5           # limits images to 5\r\n  reviews:\r\n    limit: 250         # limits reviews to 250\r\n  related_products:\r\n    limit: 10          # limits related products by name to 10\r\n  similar_by_views:\r\n      limit:           # limits similar products by views to 10\r\n```\r\n\r\n|Property|Description|\r\n|---|---|\r\n|`product`|When filtering/limiting, products' default sorting is by order id, from lowest to highest.|\r\n|`videos`|If `product.videos` is not defined, you will not return videos. If you define `product.videos`, the default behavior is to return all videos. If you define `product.videos.limit`, this sets the maximum number of videos returned.|\r\n|`images`|If `product.images` is not defined, you will not return images. If `product.images` is defined, you must also define `product.images.limit`, which throttles the number of images returned. The maximum allowable value for this parameter is five images.|\r\n|`reviews`|Boolean indicating whether to display product reviews. If `product.reviews` is present and is not explicitly set to `false`, reviews will appear. If not defined, defaults to 10 reviews. When filtering/limiting reviews, the default sorting is by review id, from lowest to highest. If a product has over 250 reviews, you can fetch the rest using the GraphQL Storefront API. See the example GraphQL query below.|\r\n|`related_products`|Displays products that are related by name. If `limit` absent or undefined, the default behavior is to display all related products. Inserting `limit` with no integer will display 0 products.|\r\n|`similar_by_views`|Displays products similar to those displayed in the current page context. If `limit` absent or undefined, the default is to display four products.|\r\n  \r\nSample GraphQL query for product reviews over the limit.\r\n  \r\n  ```yaml\r\n# Fetch product reviews for a product\r\nquery reviewsByProductId(\r\n  $productId: Int!\r\n  $cursor: String\r\n  # Use GraphQL Query Variables to inject your product ID\r\n) {\r\n  site {\r\n    product(entityId: $productId) {\r\n      reviews(first:250, after:$cursor) {\r\n        pageInfo {\r\n          endCursor\r\n          hasNextPage\r\n        }\r\n        edges {\r\n          node {\r\n            rating\r\n            title\r\n            text\r\n            createdAt {\r\n              utc\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n```\r\n## Brand attributes\r\n\r\n```yaml\r\nbrand:\r\n  products:\r\n    limit: 50   # limits products displayed for this brand to 50\r\n```\r\n\r\n|Property|Description|\r\n|---|---|\r\n|`products`|`limit` defines the number of products displayed per page for this brand. The range of possible values is 1–50 products.|\r\n\r\n## Brand list attributes\r\n\r\n```yaml\r\nbrands:\r\n  limit: 50   # limits number of brands displayed in the list to 50\r\n```\r\n\r\n|Property|Description|\r\n|---|---|\r\n|`brands`|When retrieving a collection of brands, the default sorting is by brand id, from lowest to highest. `limit` sets the number of brands displayed in the list. If `limit` is not defined, returns all brands, up to a maximum of 50.|\r\n\r\n\r\n## Search attributes\r\n\r\n```yaml\r\nsearch: \r\n  product_results:\r\n    limit: 16   # limits product results to 16\r\n```\r\n\r\n|Property|Description|\r\n|---|---|\r\n|`product_results`|`limit` defines the number of product search results displayed per page. The range of possible values is 1–100 products.|\r\n  \r\n## GraphQL attributes\r\nYou can add [GraphQL Storefront API](https://developer.bigcommerce.com/api-docs/storefront/graphql/graphql-storefront-api-overview) queries to your theme via the front matter block in a template file. For example, you can request a product's variants by augmenting the existing [product.html template](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/product.html):\r\n  \r\n ```handlebars\r\n ---\r\nproduct:\r\n    videos:\r\n        limit: {{theme_settings.productpage_videos_count}}\r\n    reviews:\r\n        limit: {{theme_settings.productpage_reviews_count}}\r\n    related_products:\r\n        limit: {{theme_settings.productpage_related_products_count}}\r\n    similar_by_views:\r\n        limit: {{theme_settings.productpage_similar_by_views_count}}\r\n gql: \"query productById($productId: Int!) {\r\n  site {\r\n    product(entityId: $productId) {\r\n      variants(first: 25) {\r\n        edges {\r\n          node {\r\n            sku\r\n            defaultImage {\r\n              url(width: 1000)\r\n        }\r\n       }\r\n      }\r\n     }\r\n    }\r\n   }\r\n  }\r\n  \"\r\n  ```\r\n  \r\nWe suggest testing GraphQL queries using the [storefront API playground](https://developer.bigcommerce.com/api-reference/storefront/graphql#graphql-playground) to refine them before adding them to your template. You can launch the playground in the context of your store by clicking the **Storefront API Playground** link under the **Advanced Settings** menu in your store's control panel.\r\n  \r\nOnce you have added a query to your template's front matter block, execution happens automatically when the page loads. The data returned by the query will be returned in the page's context and made available to the handlebars under the `gql` key. For example, you can retrieve the variant data from the above query in `product.html` like this:\r\n```handlebars\r\n {{#if gql.data.site.product}}\r\n {{#each gql.data.site.product.variants.edges}}\r\n    {{#with node}}\r\n      {{sku}} {{! - - sku code from each variant from GQL response}}\r\n    {{/with}}\r\n {{/each}}\r\n {{/if}}\r\n  ```\r\nIf the GraphQL query is invalid, Stencil returns an `errors` object with `locations` and `message` properties similar to the following example:\r\n```html\r\n{\r\n  \"gql\": {\r\n    \"errors\": [\r\n      {\r\n        \"locations\": [\r\n          {\r\n            \"column\": 1,\r\n            \"line\": 1\r\n          }\r\n        ],\r\n        \"message\": \"Syntax error while parsing GraphQL query.\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n  \r\nOn some pages, you can inject special variables into your query to fetch data relevant to that page. For example, using the `$productId` variable on product pages injects the product ID associated with the current page.\r\n\r\nThe following is the complete list of available variables:\r\n* `category.html`: `$categoryId`\r\n* `product.html`: `$productId`\r\n* `brand.html`: `$brandId`\r\n* `page.html`: `$pageId`\r\n* `contact-us.html`: `$pageId`\r\n* `blog-post.html`: `$blogPostId`\r\n  \r\nYou can also query data without using variables. The following query returns the product category tree as a JSON object.\r\n  \r\n ```yaml\r\ngql: \"query CategoryTree3LevelsDeep {\r\n  site {\r\n    categoryTree {\r\n      ...CategoryFields\r\n      children {\r\n        ...CategoryFields\r\n        children {\r\n          ...CategoryFields\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfragment CategoryFields on CategoryTreeItem {\r\n  name\r\n  path\r\n  entityId\r\n}\"\r\n\r\n```\r\n  \r\nThe example query returns the following JSON object:\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"site\": {\r\n      \"categoryTree\": [\r\n        {\r\n          \"name\": \"Apparel\",\r\n          \"path\": \"/apparel/\",\r\n          \"entityId\": 25,\r\n          \"children\": [\r\n            {\r\n              \"name\": \"Shirts\",\r\n              \"path\": \"/apparel/shirts/\",\r\n              \"entityId\": 27,\r\n              \"children\": []\r\n            },\r\n            {\r\n              \"name\": \"Hoodies\",\r\n              \"path\": \"/hoodies/\",\r\n              \"entityId\": 28,\r\n              \"children\": []\r\n            },\r\n            {\r\n              \"name\": \"Caps\",\r\n              \"path\": \"/caps/\",\r\n              \"entityId\": 29,\r\n              \"children\": []\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n``` \r\n"}],"children":[]}}}}
